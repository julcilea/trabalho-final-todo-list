{
  "stats": {
    "suites": 8,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-16T00:46:39.610Z",
    "end": "2025-09-16T00:46:40.111Z",
    "duration": 501,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "bcbef61f-0b0a-46f5-8064-29a68325d3c1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0b632352-5d2e-4bc6-b52f-179637a59bb5",
          "title": "Auth Controller",
          "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/rest/controller/authController.test.js",
          "file": "/test/rest/controller/authController.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Auth Controller\"",
              "fullTitle": "Auth Controller \"after each\" hook in \"Auth Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "12c1369d-2d76-452e-808a-75ad3a470a26",
              "parentUUID": "0b632352-5d2e-4bc6-b52f-179637a59bb5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "fc83f369-1f3f-481a-82ed-a60f6bfeacc6",
              "title": "POST /auth/register",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/rest/controller/authController.test.js",
              "file": "/test/rest/controller/authController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register a new user successfully",
                  "fullTitle": "Auth Controller POST /auth/register should register a new user successfully",
                  "timedOut": false,
                  "duration": 115,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(UserModel, 'findByEmail').returns(null);\nconst createUserStub = sinon.stub(UserModel, 'createUser').returns({ id: 1, email: 'testuser@example.com' });\nconst res = await request(app)\n  .post('/auth/register')\n  .send({ email: 'testuser@example.com', password: 'password123' });\nexpect(res.status).to.equal(201);\nexpect(res.body.message).to.equal('Usuário cadastrado com sucesso');\nexpect(createUserStub.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "b8093f42-0ad3-444b-8bf2-e3f9e72e7989",
                  "parentUUID": "fc83f369-1f3f-481a-82ed-a60f6bfeacc6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 409 if email already exists",
                  "fullTitle": "Auth Controller POST /auth/register should return 409 if email already exists",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(UserModel, 'findByEmail').returns({ id: 1, email: 'testuser@example.com' });\nconst res = await request(app)\n  .post('/auth/register')\n  .send({ email: 'testuser@example.com', password: 'password123' });\nexpect(res.status).to.equal(409);\nexpect(res.body.message).to.equal('O usuário já existe');",
                  "err": {},
                  "uuid": "7929294e-4669-48c1-8e82-6ca309a65b9b",
                  "parentUUID": "fc83f369-1f3f-481a-82ed-a60f6bfeacc6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if email or password are not provided",
                  "fullTitle": "Auth Controller POST /auth/register should return 400 if email or password are not provided",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .post('/auth/register')\n  .send({ email: 'testuser@example.com' });\nexpect(res.status).to.equal(400);\nexpect(res.body.message).to.equal('Email e senha são obrigatórios');",
                  "err": {},
                  "uuid": "db017a80-17ee-4bf4-9823-76106e576398",
                  "parentUUID": "fc83f369-1f3f-481a-82ed-a60f6bfeacc6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8093f42-0ad3-444b-8bf2-e3f9e72e7989",
                "7929294e-4669-48c1-8e82-6ca309a65b9b",
                "db017a80-17ee-4bf4-9823-76106e576398"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 122,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "4fb50cbd-f070-4ec7-9292-9470be060353",
              "title": "POST /auth/login",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/rest/controller/authController.test.js",
              "file": "/test/rest/controller/authController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should login successfully and return a token",
                  "fullTitle": "Auth Controller POST /auth/login should login successfully and return a token",
                  "timedOut": false,
                  "duration": 173,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = await bcrypt.hash('password123', 10);\nconst user = { id: 1, email: 'testuser@example.com', password: hashedPassword };\nsinon.stub(UserModel, 'findByEmail').returns(user);\nconst res = await request(app)\n  .post('/auth/login')\n  .send({ email: 'testuser@example.com', password: 'password123' });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('token');",
                  "err": {},
                  "uuid": "d7f78a53-3db1-4384-bf42-c257ca1c1664",
                  "parentUUID": "4fb50cbd-f070-4ec7-9292-9470be060353",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for invalid credentials (user not found)",
                  "fullTitle": "Auth Controller POST /auth/login should return 401 for invalid credentials (user not found)",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(UserModel, 'findByEmail').returns(null);\nconst res = await request(app)\n  .post('/auth/login')\n  .send({ email: 'wronguser@example.com', password: 'password123' });\nexpect(res.status).to.equal(401);\nexpect(res.body.message).to.equal('Credenciais inválidas');",
                  "err": {},
                  "uuid": "e8ae991f-78db-4aee-bbb1-cdbc0a25c10c",
                  "parentUUID": "4fb50cbd-f070-4ec7-9292-9470be060353",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for invalid credentials (wrong password)",
                  "fullTitle": "Auth Controller POST /auth/login should return 401 for invalid credentials (wrong password)",
                  "timedOut": false,
                  "duration": 167,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = await bcrypt.hash('password123', 10);\nconst user = { id: 1, email: 'testuser@example.com', password: hashedPassword };\nsinon.stub(UserModel, 'findByEmail').returns(user);\nconst res = await request(app)\n  .post('/auth/login')\n  .send({ email: 'testuser@example.com', password: 'wrongpassword' });\nexpect(res.status).to.equal(401);\nexpect(res.body.message).to.equal('Credenciais inválidas');",
                  "err": {},
                  "uuid": "a8398740-6020-4e9d-b135-22c6d54b3e69",
                  "parentUUID": "4fb50cbd-f070-4ec7-9292-9470be060353",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7f78a53-3db1-4384-bf42-c257ca1c1664",
                "e8ae991f-78db-4aee-bbb1-cdbc0a25c10c",
                "a8398740-6020-4e9d-b135-22c6d54b3e69"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 342,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "d30ba44b-e171-40e6-9ef1-37f9b622d59f",
          "title": "To-Do Controller",
          "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/rest/controller/todoController.test.js",
          "file": "/test/rest/controller/todoController.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"To-Do Controller\"",
              "fullTitle": "To-Do Controller \"before each\" hook in \"To-Do Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.stub(jwt, 'verify').returns(fakeUser);",
              "err": {},
              "uuid": "43a9555e-c1d0-4921-b792-06ee5560ee87",
              "parentUUID": "d30ba44b-e171-40e6-9ef1-37f9b622d59f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"To-Do Controller\"",
              "fullTitle": "To-Do Controller \"after each\" hook in \"To-Do Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "ec9a9dd0-985f-4cd6-b2b5-5113c85af08a",
              "parentUUID": "d30ba44b-e171-40e6-9ef1-37f9b622d59f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "a7ab776b-58f0-4950-8806-a1b8140c9b89",
              "title": "GET /todos",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/rest/controller/todoController.test.js",
              "file": "/test/rest/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return only todos belonging to the authenticated user",
                  "fullTitle": "To-Do Controller GET /todos should return only todos belonging to the authenticated user",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userTodos = [{ id: 1, userId: fakeUser.id, title: 'User 1 Todo' }];\nsinon.stub(TodoModel, 'findAllByUserId').withArgs(fakeUser.id).returns(userTodos);\nconst res = await request(app)\n  .get('/todos')\n  .set('Authorization', 'Bearer fake-token');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array').with.lengthOf(1);\nexpect(res.body[0].title).to.equal('User 1 Todo');\nexpect(TodoModel.findAllByUserId.calledWith(fakeUser.id)).to.be.true;",
                  "err": {},
                  "uuid": "75e57780-2db0-4c06-bd10-f8890cecdea1",
                  "parentUUID": "a7ab776b-58f0-4950-8806-a1b8140c9b89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "75e57780-2db0-4c06-bd10-f8890cecdea1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "1cbff3a0-74a7-4820-b616-f951e15fcbc4",
              "title": "POST /todos",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/rest/controller/todoController.test.js",
              "file": "/test/rest/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new todo for the authenticated user",
                  "fullTitle": "To-Do Controller POST /todos should create a new todo for the authenticated user",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newTodo = { title: 'New Test Todo', description: 'A description' };\nconst createdTodo = { id: 10, userId: fakeUser.id, ...newTodo, completed: false, createdAt: new Date() };\nsinon.stub(TodoModel, 'create').returns(createdTodo);\nconst res = await request(app)\n  .post('/todos')\n  .set('Authorization', 'Bearer fake-token')\n  .send(newTodo);\nexpect(res.status).to.equal(201);\nexpect(res.body.title).to.equal(newTodo.title);\nexpect(res.body.userId).to.equal(fakeUser.id);\nexpect(TodoModel.create.calledWith(sinon.match({ userId: fakeUser.id, title: newTodo.title }))).to.be.true;",
                  "err": {},
                  "uuid": "691ae026-e9e7-4b90-8e79-6372ef2399b3",
                  "parentUUID": "1cbff3a0-74a7-4820-b616-f951e15fcbc4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if title is missing",
                  "fullTitle": "To-Do Controller POST /todos should return 400 if title is missing",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .post('/todos')\n  .set('Authorization', 'Bearer fake-token')\n  .send({ description: 'A description' });\nexpect(res.status).to.equal(400);\nexpect(res.body.message).to.equal('Titulo é obrigatório');",
                  "err": {},
                  "uuid": "823d4745-a302-43e6-9a72-8922fc7f3979",
                  "parentUUID": "1cbff3a0-74a7-4820-b616-f951e15fcbc4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "691ae026-e9e7-4b90-8e79-6372ef2399b3",
                "823d4745-a302-43e6-9a72-8922fc7f3979"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "37c04e9f-a123-473e-9f15-c5e7746edab1",
              "title": "PUT /todos/:id",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/rest/controller/todoController.test.js",
              "file": "/test/rest/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a todo successfully",
                  "fullTitle": "To-Do Controller PUT /todos/:id should update a todo successfully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = 1;\nconst updatedData = { title: 'Updated Title', completed: true };\nconst updatedTodo = { id: todoId, userId: fakeUser.id, ...updatedData };\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(todoId, fakeUser.id).returns(0);\nsinon.stub(TodoModel, 'update').returns(updatedTodo);\nconst res = await request(app)\n  .put(`/todos/${todoId}`)\n  .set('Authorization', 'Bearer fake-token')\n  .send(updatedData);\nexpect(res.status).to.equal(200);\nexpect(res.body.title).to.equal(updatedData.title);\nexpect(res.body.completed).to.be.true;",
                  "err": {},
                  "uuid": "ecd1b087-ee62-476a-8e16-a8be66da0040",
                  "parentUUID": "37c04e9f-a123-473e-9f15-c5e7746edab1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if todo not found",
                  "fullTitle": "To-Do Controller PUT /todos/:id should return 404 if todo not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = 99;\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(todoId, fakeUser.id).returns(-1);\nconst res = await request(app)\n  .put(`/todos/${todoId}`)\n  .set('Authorization', 'Bearer fake-token')\n  .send({ title: 'Does not matter' });\nexpect(res.status).to.equal(404);\nexpect(res.body.message).to.equal('Tarefa não encontrada');",
                  "err": {},
                  "uuid": "73ed89ac-a22e-4635-b4b0-518256aeed8c",
                  "parentUUID": "37c04e9f-a123-473e-9f15-c5e7746edab1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ecd1b087-ee62-476a-8e16-a8be66da0040",
                "73ed89ac-a22e-4635-b4b0-518256aeed8c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "eca3a764-5300-4b09-87c6-cb5e6306b427",
              "title": "DELETE /todos/:id",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/rest/controller/todoController.test.js",
              "file": "/test/rest/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a todo successfully",
                  "fullTitle": "To-Do Controller DELETE /todos/:id should delete a todo successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = 1;\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(todoId, fakeUser.id).returns(0);\nconst removeStub = sinon.stub(TodoModel, 'remove');\nconst res = await request(app)\n  .delete(`/todos/${todoId}`)\n  .set('Authorization', 'Bearer fake-token');\nexpect(res.status).to.equal(204);\nexpect(removeStub.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "df8df745-9c36-4d66-ad23-f87a77a03bef",
                  "parentUUID": "eca3a764-5300-4b09-87c6-cb5e6306b427",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if todo not found",
                  "fullTitle": "To-Do Controller DELETE /todos/:id should return 404 if todo not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = 99;\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(todoId, fakeUser.id).returns(-1);\nconst res = await request(app)\n  .delete(`/todos/${todoId}`)\n  .set('Authorization', 'Bearer fake-token');\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "38b9ed99-7eff-4bf5-a655-a1c52d18e6b5",
                  "parentUUID": "eca3a764-5300-4b09-87c6-cb5e6306b427",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "df8df745-9c36-4d66-ad23-f87a77a03bef",
                "38b9ed99-7eff-4bf5-a655-a1c52d18e6b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report1",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./",
        "reportFilename": "report1",
        "overwrite": "true",
        "html": "true",
        "json": "true"
      },
      "version": "6.2.0"
    }
  }
}
{
  "stats": {
    "suites": 8,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-16T00:46:51.826Z",
    "end": "2025-09-16T00:46:52.408Z",
    "duration": 582,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2a1b9ec7-57c3-430f-bfd9-03ca6bc6d5e1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "38e5c644-d20a-41d2-ab80-077bf401f7b8",
          "title": "GraphQL Auth",
          "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/graphql/controller/authController.test.js",
          "file": "/test/graphql/controller/authController.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GraphQL Auth\"",
              "fullTitle": "GraphQL Auth \"before all\" hook in \"GraphQL Auth\"",
              "timedOut": false,
              "duration": 37,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = await startServer();",
              "err": {},
              "uuid": "e6fc378d-6af4-4f9f-819c-1f49f6b181a0",
              "parentUUID": "38e5c644-d20a-41d2-ab80-077bf401f7b8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"GraphQL Auth\"",
              "fullTitle": "GraphQL Auth \"after each\" hook in \"GraphQL Auth\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "59489519-383e-4539-b1f7-4c98bc642c69",
              "parentUUID": "38e5c644-d20a-41d2-ab80-077bf401f7b8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "e8526142-a3c6-4082-8818-84b0c947d75b",
              "title": "Mutation register",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/graphql/controller/authController.test.js",
              "file": "/test/graphql/controller/authController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register a new user successfully",
                  "fullTitle": "GraphQL Auth Mutation register should register a new user successfully",
                  "timedOut": false,
                  "duration": 127,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(UserModel, 'findByEmail').returns(null);\nconst createUserStub = sinon.stub(UserModel, 'createUser').returns({ id: 1, email: 'testuser@example.com' });\nconst res = await request(app)\n    .post('/graphql')\n    .send({\n        query: registerMutation,\n        variables: {\n            input: { email: 'testuser@example.com', password: 'password123' }\n        }\n    });\nexpect(res.body.data.register.message).to.equal('Usu치rio cadastrado com sucesso');\nexpect(createUserStub.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "ced0449d-dd89-4002-8fd9-11efaf0e457e",
                  "parentUUID": "e8526142-a3c6-4082-8818-84b0c947d75b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error if email already exists",
                  "fullTitle": "GraphQL Auth Mutation register should return error if email already exists",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(UserModel, 'findByEmail').returns({ id: 1, email: 'testuser@example.com' });\nconst res = await request(app)\n    .post('/graphql')\n    .send({\n        query: registerMutation,\n        variables: {\n            input: { email: 'testuser@example.com', password: 'password123' }\n        }\n    });\nexpect(res.body.errors[0].message).to.equal('O usu치rio j치 existe');",
                  "err": {},
                  "uuid": "0b4b14b6-5e50-48ef-ad5a-7333c83e0f63",
                  "parentUUID": "e8526142-a3c6-4082-8818-84b0c947d75b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate required fields with GraphQL schema",
                  "fullTitle": "GraphQL Auth Mutation register should validate required fields with GraphQL schema",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n    .post('/graphql')\n    .send({\n        query: registerMutation,\n        variables: {\n            input: {}\n        }\n    });\nexpect(res.body.errors[0].message).to.include('Field \"email\" of required type \"String!\" was not provided');",
                  "err": {},
                  "uuid": "5680476c-1b92-4311-b4de-e2f6700dd655",
                  "parentUUID": "e8526142-a3c6-4082-8818-84b0c947d75b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ced0449d-dd89-4002-8fd9-11efaf0e457e",
                "0b4b14b6-5e50-48ef-ad5a-7333c83e0f63",
                "5680476c-1b92-4311-b4de-e2f6700dd655"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 136,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "c22d7156-cd00-4a82-87de-c331ea09ad0f",
              "title": "Mutation login",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/graphql/controller/authController.test.js",
              "file": "/test/graphql/controller/authController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should login successfully and return a token",
                  "fullTitle": "GraphQL Auth Mutation login should login successfully and return a token",
                  "timedOut": false,
                  "duration": 199,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = await bcrypt.hash('password123', 10);\nconst user = { id: 1, email: 'testuser@example.com', password: hashedPassword };\nsinon.stub(UserModel, 'findByEmail').returns(user);\nconst res = await request(app)\n    .post('/graphql')\n    .send({\n        query: loginMutation,\n        variables: {\n            input: { email: 'testuser@example.com', password: 'password123' }\n        }\n    });\nexpect(res.body.data.login).to.have.property('token');",
                  "err": {},
                  "uuid": "cd32ba42-fa84-4030-9fd9-6d0225cc43e8",
                  "parentUUID": "c22d7156-cd00-4a82-87de-c331ea09ad0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error for invalid credentials (user not found)",
                  "fullTitle": "GraphQL Auth Mutation login should return error for invalid credentials (user not found)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(UserModel, 'findByEmail').returns(null);\nconst res = await request(app)\n    .post('/graphql')\n    .send({\n        query: loginMutation,\n        variables: {\n            input: { email: 'wronguser@example.com', password: 'password123' }\n        }\n    });\nexpect(res.body.errors[0].message).to.equal('Credenciais inv치lidas');",
                  "err": {},
                  "uuid": "ce57821e-2302-440e-8d72-7dab6c434abe",
                  "parentUUID": "c22d7156-cd00-4a82-87de-c331ea09ad0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error for invalid credentials (wrong password)",
                  "fullTitle": "GraphQL Auth Mutation login should return error for invalid credentials (wrong password)",
                  "timedOut": false,
                  "duration": 167,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = await bcrypt.hash('password123', 10);\nconst user = { id: 1, email: 'testuser@example.com', password: hashedPassword };\nsinon.stub(UserModel, 'findByEmail').returns(user);\nconst res = await request(app)\n    .post('/graphql')\n    .send({\n        query: loginMutation,\n        variables: {\n            input: { email: 'testuser@example.com', password: 'wrongpassword' }\n        }\n    });\nexpect(res.body.errors[0].message).to.equal('Credenciais inv치lidas');",
                  "err": {},
                  "uuid": "f07e9a9c-7b03-4c81-86ea-abb010987e12",
                  "parentUUID": "c22d7156-cd00-4a82-87de-c331ea09ad0f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cd32ba42-fa84-4030-9fd9-6d0225cc43e8",
                "ce57821e-2302-440e-8d72-7dab6c434abe",
                "f07e9a9c-7b03-4c81-86ea-abb010987e12"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 369,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "9d77fb66-77ff-42de-aa43-7e2c96e7ef60",
          "title": "GraphQL Todo",
          "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/graphql/controller/todoController.test.js",
          "file": "/test/graphql/controller/todoController.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GraphQL Todo\"",
              "fullTitle": "GraphQL Todo \"before all\" hook in \"GraphQL Todo\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = await startServer();",
              "err": {},
              "uuid": "df13f7d9-17db-47ad-8d05-8322434d4e53",
              "parentUUID": "9d77fb66-77ff-42de-aa43-7e2c96e7ef60",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"GraphQL Todo\"",
              "fullTitle": "GraphQL Todo \"before each\" hook in \"GraphQL Todo\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.stub(jwt, 'verify').returns(fakeUser);",
              "err": {},
              "uuid": "d51da5ab-49d2-4b03-a9a8-7f7633a69842",
              "parentUUID": "9d77fb66-77ff-42de-aa43-7e2c96e7ef60",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"GraphQL Todo\"",
              "fullTitle": "GraphQL Todo \"after each\" hook in \"GraphQL Todo\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "3296a8bc-c9a3-4da3-8dd1-52c670d70cba",
              "parentUUID": "9d77fb66-77ff-42de-aa43-7e2c96e7ef60",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "3b26ef77-7f6a-4d85-b339-281f22ac94dc",
              "title": "Query todos",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/graphql/controller/todoController.test.js",
              "file": "/test/graphql/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return only todos belonging to the authenticated user",
                  "fullTitle": "GraphQL Todo Query todos should return only todos belonging to the authenticated user",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userTodos = [{ id: 1, userId: fakeUser.id, title: 'User 1 Todo', completed: false, createdAt: new Date().toISOString() }];\nsinon.stub(TodoModel, 'findAllByUserId').withArgs(fakeUser.id).returns(userTodos);\nconst res = await request(app)\n    .post('/graphql')\n    .set('Authorization', `Bearer ${fakeToken}`)\n    .send({ query: todosQuery });\nexpect(res.body.data.todos).to.be.an('array').with.lengthOf(1);\nexpect(res.body.data.todos[0].title).to.equal('User 1 Todo');\nexpect(TodoModel.findAllByUserId.calledWith(fakeUser.id)).to.be.true;",
                  "err": {},
                  "uuid": "6c2ab97b-cb8a-422a-8094-0e24af6255bf",
                  "parentUUID": "3b26ef77-7f6a-4d85-b339-281f22ac94dc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c2ab97b-cb8a-422a-8094-0e24af6255bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "430f8958-2ebf-407b-879e-602f988b90e4",
              "title": "Mutation createTodo",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/graphql/controller/todoController.test.js",
              "file": "/test/graphql/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new todo for the authenticated user",
                  "fullTitle": "GraphQL Todo Mutation createTodo should create a new todo for the authenticated user",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newTodo = { title: 'New Test Todo', description: 'A description' };\nconst createdTodo = { id: 10, userId: fakeUser.id, ...newTodo, completed: false, createdAt: new Date() };\nsinon.stub(TodoModel, 'create').returns(createdTodo);\nconst res = await request(app)\n    .post('/graphql')\n    .set('Authorization', `Bearer ${fakeToken}`)\n    .send({\n        query: createTodoMutation,\n        variables: { input: newTodo }\n    });\nexpect(res.body.data.createTodo.title).to.equal(newTodo.title);\nexpect(res.body.data.createTodo.userId).to.equal(String(fakeUser.id));\nexpect(TodoModel.create.calledWith(sinon.match({ userId: fakeUser.id, title: newTodo.title }))).to.be.true;",
                  "err": {},
                  "uuid": "0e2dddf8-2532-408f-a5bc-b184eaad787c",
                  "parentUUID": "430f8958-2ebf-407b-879e-602f988b90e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate required fields with GraphQL schema",
                  "fullTitle": "GraphQL Todo Mutation createTodo should validate required fields with GraphQL schema",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n    .post('/graphql')\n    .set('Authorization', `Bearer ${fakeToken}`)\n    .send({\n        query: createTodoMutation,\n        variables: { input: { description: 'A description' } }\n    });\nexpect(res.body.errors[0].message).to.include('Field \"title\" of required type \"String!\" was not provided');",
                  "err": {},
                  "uuid": "4bc7aae0-deb5-481a-bd74-be6efbd2a555",
                  "parentUUID": "430f8958-2ebf-407b-879e-602f988b90e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e2dddf8-2532-408f-a5bc-b184eaad787c",
                "4bc7aae0-deb5-481a-bd74-be6efbd2a555"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "40532587-acd3-4dba-b311-30e7f04d696b",
              "title": "Mutation updateTodo",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/graphql/controller/todoController.test.js",
              "file": "/test/graphql/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a todo successfully",
                  "fullTitle": "GraphQL Todo Mutation updateTodo should update a todo successfully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = \"1\";\nconst updatedData = { title: 'Updated Title', completed: true };\nconst updatedTodo = { id: Number(todoId), userId: fakeUser.id, ...updatedData };\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(Number(todoId), fakeUser.id).returns(0);\nsinon.stub(TodoModel, 'update').returns(updatedTodo);\nconst res = await request(app)\n    .post('/graphql')\n    .set('Authorization', `Bearer ${fakeToken}`)\n    .send({\n        query: updateTodoMutation,\n        variables: { id: todoId, input: updatedData }\n    });\nexpect(res.body.data.updateTodo.title).to.equal(updatedData.title);\nexpect(res.body.data.updateTodo.completed).to.be.true;",
                  "err": {},
                  "uuid": "9c85b705-d7d5-41b2-baeb-d2f8ad379c67",
                  "parentUUID": "40532587-acd3-4dba-b311-30e7f04d696b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error if todo not found",
                  "fullTitle": "GraphQL Todo Mutation updateTodo should return error if todo not found",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = \"99\";\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(Number(todoId), fakeUser.id).returns(-1);\nconst res = await request(app)\n    .post('/graphql')\n    .set('Authorization', `Bearer ${fakeToken}`)\n    .send({\n        query: updateTodoMutation,\n        variables: { id: todoId, input: { title: 'Does not matter' } }\n    });\nexpect(res.body.errors[0].message).to.equal('Tarefa n칚o encontrada');",
                  "err": {},
                  "uuid": "8a6e6b82-27a0-45b7-9306-536a31443f63",
                  "parentUUID": "40532587-acd3-4dba-b311-30e7f04d696b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9c85b705-d7d5-41b2-baeb-d2f8ad379c67",
                "8a6e6b82-27a0-45b7-9306-536a31443f63"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "449131b7-f68e-477f-8412-b13d7be5d75b",
              "title": "Mutation deleteTodo",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/graphql/controller/todoController.test.js",
              "file": "/test/graphql/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a todo successfully",
                  "fullTitle": "GraphQL Todo Mutation deleteTodo should delete a todo successfully",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = \"1\";\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(Number(todoId), fakeUser.id).returns(0);\nconst removeStub = sinon.stub(TodoModel, 'remove');\nconst res = await request(app)\n    .post('/graphql')\n    .set('Authorization', `Bearer ${fakeToken}`)\n    .send({\n        query: deleteTodoMutation,\n        variables: { id: todoId }\n    });\nexpect(res.body.data.deleteTodo.message).to.equal('Tarefa exclu칤da com sucesso');\nexpect(removeStub.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "52650734-9823-4570-8c29-044310003f57",
                  "parentUUID": "449131b7-f68e-477f-8412-b13d7be5d75b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error if todo not found",
                  "fullTitle": "GraphQL Todo Mutation deleteTodo should return error if todo not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = \"99\";\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(Number(todoId), fakeUser.id).returns(-1);\nconst res = await request(app)\n    .post('/graphql')\n    .set('Authorization', `Bearer ${fakeToken}`)\n    .send({\n        query: deleteTodoMutation,\n        variables: { id: todoId }\n    });\nexpect(res.body.errors[0].message).to.equal('Tarefa n칚o encontrada');",
                  "err": {},
                  "uuid": "3399626d-b04b-4e03-b1c7-d6867accbf00",
                  "parentUUID": "449131b7-f68e-477f-8412-b13d7be5d75b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52650734-9823-4570-8c29-044310003f57",
                "3399626d-b04b-4e03-b1c7-d6867accbf00"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report-graphql",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./",
        "reportFilename": "report-graphql",
        "overwrite": "true",
        "html": "true",
        "json": "true"
      },
      "version": "6.2.0"
    }
  }
}
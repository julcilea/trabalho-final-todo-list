{
  "stats": {
    "suites": 8,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-16T00:20:19.763Z",
    "end": "2025-09-16T00:20:20.240Z",
    "duration": 477,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "691910cd-0fda-494b-b971-dec43be9ef02",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4916e5bd-866e-4cb9-b31a-32dfc3212d86",
          "title": "GraphQL Auth",
          "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/graphql/controller/authController.test.js",
          "file": "/test/graphql/controller/authController.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GraphQL Auth\"",
              "fullTitle": "GraphQL Auth \"before all\" hook in \"GraphQL Auth\"",
              "timedOut": false,
              "duration": 34,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = await startServer();",
              "err": {},
              "uuid": "42618e77-d96b-4d23-8049-32058a63a0ce",
              "parentUUID": "4916e5bd-866e-4cb9-b31a-32dfc3212d86",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"GraphQL Auth\"",
              "fullTitle": "GraphQL Auth \"after each\" hook in \"GraphQL Auth\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "330317be-10a7-46dc-b4f9-c35d0c61b2ed",
              "parentUUID": "4916e5bd-866e-4cb9-b31a-32dfc3212d86",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "eedea496-8b16-4172-b888-fb2b702de254",
              "title": "Mutation register",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/graphql/controller/authController.test.js",
              "file": "/test/graphql/controller/authController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register a new user successfully",
                  "fullTitle": "GraphQL Auth Mutation register should register a new user successfully",
                  "timedOut": false,
                  "duration": 113,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(UserModel, 'findByEmail').returns(null);\nconst createUserStub = sinon.stub(UserModel, 'createUser').returns({ id: 1, email: 'testuser@example.com' });\nconst res = await request(app)\n  .post('/graphql')\n  .send({\n    query: registerMutation,\n    variables: {\n      input: { email: 'testuser@example.com', password: 'password123' }\n    }\n  });\nexpect(res.body.data.register.message).to.equal('Usu치rio cadastrado com sucesso');\nexpect(createUserStub.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "ae3a3739-a95b-40e8-be78-94fc42e49b49",
                  "parentUUID": "eedea496-8b16-4172-b888-fb2b702de254",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error if email already exists",
                  "fullTitle": "GraphQL Auth Mutation register should return error if email already exists",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(UserModel, 'findByEmail').returns({ id: 1, email: 'testuser@example.com' });\nconst res = await request(app)\n  .post('/graphql')\n  .send({\n    query: registerMutation,\n    variables: {\n      input: { email: 'testuser@example.com', password: 'password123' }\n    }\n  });\nexpect(res.body.errors[0].message).to.equal('O usu치rio j치 existe');",
                  "err": {},
                  "uuid": "bca34053-6dab-4635-916a-fa13c0718a44",
                  "parentUUID": "eedea496-8b16-4172-b888-fb2b702de254",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate required fields with GraphQL schema",
                  "fullTitle": "GraphQL Auth Mutation register should validate required fields with GraphQL schema",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .post('/graphql')\n  .send({\n    query: registerMutation,\n    variables: {\n      input: { }\n    }\n  });\nexpect(res.body.errors[0].message).to.include('Field \"email\" of required type \"String!\" was not provided');",
                  "err": {},
                  "uuid": "b392f1b6-a736-41ed-8ae8-b6c1e5aa13d0",
                  "parentUUID": "eedea496-8b16-4172-b888-fb2b702de254",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae3a3739-a95b-40e8-be78-94fc42e49b49",
                "bca34053-6dab-4635-916a-fa13c0718a44",
                "b392f1b6-a736-41ed-8ae8-b6c1e5aa13d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 122,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "42eec587-2c6a-4a2f-8d2c-338efab54db3",
              "title": "Mutation login",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/graphql/controller/authController.test.js",
              "file": "/test/graphql/controller/authController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should login successfully and return a token",
                  "fullTitle": "GraphQL Auth Mutation login should login successfully and return a token",
                  "timedOut": false,
                  "duration": 142,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = await bcrypt.hash('password123', 10);\nconst user = { id: 1, email: 'testuser@example.com', password: hashedPassword };\nsinon.stub(UserModel, 'findByEmail').returns(user);\nconst res = await request(app)\n  .post('/graphql')\n  .send({\n    query: loginMutation,\n    variables: {\n      input: { email: 'testuser@example.com', password: 'password123' }\n    }\n  });\nexpect(res.body.data.login).to.have.property('token');",
                  "err": {},
                  "uuid": "70d69183-ae48-4336-b6b2-e0b18dc207a1",
                  "parentUUID": "42eec587-2c6a-4a2f-8d2c-338efab54db3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error for invalid credentials (user not found)",
                  "fullTitle": "GraphQL Auth Mutation login should return error for invalid credentials (user not found)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(UserModel, 'findByEmail').returns(null);\nconst res = await request(app)\n  .post('/graphql')\n  .send({\n    query: loginMutation,\n    variables: {\n      input: { email: 'wronguser@example.com', password: 'password123' }\n    }\n  });\nexpect(res.body.errors[0].message).to.equal('Credenciais inv치lidas');",
                  "err": {},
                  "uuid": "5e70da1e-c0e5-478f-9102-3922a888fd79",
                  "parentUUID": "42eec587-2c6a-4a2f-8d2c-338efab54db3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error for invalid credentials (wrong password)",
                  "fullTitle": "GraphQL Auth Mutation login should return error for invalid credentials (wrong password)",
                  "timedOut": false,
                  "duration": 139,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = await bcrypt.hash('password123', 10);\nconst user = { id: 1, email: 'testuser@example.com', password: hashedPassword };\nsinon.stub(UserModel, 'findByEmail').returns(user);\nconst res = await request(app)\n  .post('/graphql')\n  .send({\n    query: loginMutation,\n    variables: {\n      input: { email: 'testuser@example.com', password: 'wrongpassword' }\n    }\n  });\nexpect(res.body.errors[0].message).to.equal('Credenciais inv치lidas');",
                  "err": {},
                  "uuid": "89a4699a-cd01-4b2e-8441-7380c16e8307",
                  "parentUUID": "42eec587-2c6a-4a2f-8d2c-338efab54db3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70d69183-ae48-4336-b6b2-e0b18dc207a1",
                "5e70da1e-c0e5-478f-9102-3922a888fd79",
                "89a4699a-cd01-4b2e-8441-7380c16e8307"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 285,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "48e42a4b-2d92-4d52-abbb-ffb48920f607",
          "title": "GraphQL Todo",
          "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/graphql/controller/todoController.test.js",
          "file": "/test/graphql/controller/todoController.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GraphQL Todo\"",
              "fullTitle": "GraphQL Todo \"before all\" hook in \"GraphQL Todo\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "app = await startServer();",
              "err": {},
              "uuid": "1195a539-4f0b-42cd-bf20-7a9570cbe7bd",
              "parentUUID": "48e42a4b-2d92-4d52-abbb-ffb48920f607",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"GraphQL Todo\"",
              "fullTitle": "GraphQL Todo \"before each\" hook in \"GraphQL Todo\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.stub(jwt, 'verify').returns(fakeUser);",
              "err": {},
              "uuid": "066573e9-3d58-4d25-9344-380b456391f5",
              "parentUUID": "48e42a4b-2d92-4d52-abbb-ffb48920f607",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"GraphQL Todo\"",
              "fullTitle": "GraphQL Todo \"after each\" hook in \"GraphQL Todo\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "e8a46f05-42d4-486b-9ba5-216f62fd7fb9",
              "parentUUID": "48e42a4b-2d92-4d52-abbb-ffb48920f607",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "19f8e89b-e359-47c5-93db-c1eb0864c671",
              "title": "Query todos",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/graphql/controller/todoController.test.js",
              "file": "/test/graphql/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return only todos belonging to the authenticated user",
                  "fullTitle": "GraphQL Todo Query todos should return only todos belonging to the authenticated user",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userTodos = [{ id: 1, userId: fakeUser.id, title: 'User 1 Todo', completed: false, createdAt: new Date().toISOString() }];\nsinon.stub(TodoModel, 'findAllByUserId').withArgs(fakeUser.id).returns(userTodos);\nconst res = await request(app)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${fakeToken}`)\n  .send({ query: todosQuery });\nexpect(res.body.data.todos).to.be.an('array').with.lengthOf(1);\nexpect(res.body.data.todos[0].title).to.equal('User 1 Todo');\nexpect(TodoModel.findAllByUserId.calledWith(fakeUser.id)).to.be.true;",
                  "err": {},
                  "uuid": "81c032b1-8f27-461e-b370-722c0f0bf1bc",
                  "parentUUID": "19f8e89b-e359-47c5-93db-c1eb0864c671",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "81c032b1-8f27-461e-b370-722c0f0bf1bc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "7190380d-55e1-4195-9986-103b3f694f32",
              "title": "Mutation createTodo",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/graphql/controller/todoController.test.js",
              "file": "/test/graphql/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new todo for the authenticated user",
                  "fullTitle": "GraphQL Todo Mutation createTodo should create a new todo for the authenticated user",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newTodo = { title: 'New Test Todo', description: 'A description' };\nconst createdTodo = { id: 10, userId: fakeUser.id, ...newTodo, completed: false, createdAt: new Date() };\nsinon.stub(TodoModel, 'create').returns(createdTodo);\nconst res = await request(app)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${fakeToken}`)\n  .send({\n    query: createTodoMutation,\n    variables: { input: newTodo }\n  });\nexpect(res.body.data.createTodo.title).to.equal(newTodo.title);\nexpect(res.body.data.createTodo.userId).to.equal(String(fakeUser.id));\nexpect(TodoModel.create.calledWith(sinon.match({ userId: fakeUser.id, title: newTodo.title }))).to.be.true;",
                  "err": {},
                  "uuid": "10d51c79-c431-411a-a3af-fd56ec88be2a",
                  "parentUUID": "7190380d-55e1-4195-9986-103b3f694f32",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate required fields with GraphQL schema",
                  "fullTitle": "GraphQL Todo Mutation createTodo should validate required fields with GraphQL schema",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${fakeToken}`)\n  .send({\n    query: createTodoMutation,\n    variables: { input: { description: 'A description' } }\n  });\nexpect(res.body.errors[0].message).to.include('Field \"title\" of required type \"String!\" was not provided');",
                  "err": {},
                  "uuid": "1f66449a-c892-4ec2-9190-ca489b8ede23",
                  "parentUUID": "7190380d-55e1-4195-9986-103b3f694f32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "10d51c79-c431-411a-a3af-fd56ec88be2a",
                "1f66449a-c892-4ec2-9190-ca489b8ede23"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "6ca9a57f-c10c-4996-a751-20c95617d000",
              "title": "Mutation updateTodo",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/graphql/controller/todoController.test.js",
              "file": "/test/graphql/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a todo successfully",
                  "fullTitle": "GraphQL Todo Mutation updateTodo should update a todo successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = \"1\";\nconst updatedData = { title: 'Updated Title', completed: true };\nconst updatedTodo = { id: Number(todoId), userId: fakeUser.id, ...updatedData };\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(Number(todoId), fakeUser.id).returns(0);\nsinon.stub(TodoModel, 'update').returns(updatedTodo);\nconst res = await request(app)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${fakeToken}`)\n  .send({\n    query: updateTodoMutation,\n    variables: { id: todoId, input: updatedData }\n  });\nexpect(res.body.data.updateTodo.title).to.equal(updatedData.title);\nexpect(res.body.data.updateTodo.completed).to.be.true;",
                  "err": {},
                  "uuid": "c882e13d-eff4-4e62-bcc4-46dc9ac6529a",
                  "parentUUID": "6ca9a57f-c10c-4996-a751-20c95617d000",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error if todo not found",
                  "fullTitle": "GraphQL Todo Mutation updateTodo should return error if todo not found",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = \"99\";\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(Number(todoId), fakeUser.id).returns(-1);\nconst res = await request(app)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${fakeToken}`)\n  .send({\n    query: updateTodoMutation,\n    variables: { id: todoId, input: { title: 'Does not matter' } }\n  });\nexpect(res.body.errors[0].message).to.equal('Tarefa n칚o encontrada');",
                  "err": {},
                  "uuid": "e7c16530-367c-47eb-971b-8c41cb5ebe80",
                  "parentUUID": "6ca9a57f-c10c-4996-a751-20c95617d000",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c882e13d-eff4-4e62-bcc4-46dc9ac6529a",
                "e7c16530-367c-47eb-971b-8c41cb5ebe80"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "22ff3939-9501-4964-afbb-d4711db98f8c",
              "title": "Mutation deleteTodo",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/graphql/controller/todoController.test.js",
              "file": "/test/graphql/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a todo successfully",
                  "fullTitle": "GraphQL Todo Mutation deleteTodo should delete a todo successfully",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = \"1\";\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(Number(todoId), fakeUser.id).returns(0);\nconst removeStub = sinon.stub(TodoModel, 'remove');\nconst res = await request(app)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${fakeToken}`)\n  .send({\n    query: deleteTodoMutation,\n    variables: { id: todoId }\n  });\nexpect(res.body.data.deleteTodo.message).to.equal('Tarefa exclu칤da com sucesso');\nexpect(removeStub.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "c7c3b42c-3f87-46cc-ab3c-e026790c7f64",
                  "parentUUID": "22ff3939-9501-4964-afbb-d4711db98f8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error if todo not found",
                  "fullTitle": "GraphQL Todo Mutation deleteTodo should return error if todo not found",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = \"99\";\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(Number(todoId), fakeUser.id).returns(-1);\nconst res = await request(app)\n  .post('/graphql')\n  .set('Authorization', `Bearer ${fakeToken}`)\n  .send({\n    query: deleteTodoMutation,\n    variables: { id: todoId }\n  });\nexpect(res.body.errors[0].message).to.equal('Tarefa n칚o encontrada');",
                  "err": {},
                  "uuid": "650da626-db8b-4267-91ca-335ce634fc35",
                  "parentUUID": "22ff3939-9501-4964-afbb-d4711db98f8c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c7c3b42c-3f87-46cc-ab3c-e026790c7f64",
                "650da626-db8b-4267-91ca-335ce634fc35"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report-graphql",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./",
        "reportFilename": "report-graphql",
        "overwrite": "true",
        "html": "true",
        "json": "true"
      },
      "version": "6.2.0"
    }
  }
}
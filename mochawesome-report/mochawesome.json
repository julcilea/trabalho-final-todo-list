{
  "stats": {
    "suites": 16,
    "tests": 26,
    "passes": 12,
    "pending": 0,
    "failures": 14,
    "start": "2025-09-07T02:20:18.534Z",
    "end": "2025-09-07T02:20:19.127Z",
    "duration": 593,
    "testsRegistered": 26,
    "passPercent": 46.15384615384615,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f2194ca4-97ad-4834-8c80-7e0a4ffcdd47",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "772de56d-bd68-42cc-9971-9d4b554c4311",
          "title": "Auth Controller",
          "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/authController.test.js",
          "file": "/test/rest/controller/authController.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Auth Controller\"",
              "fullTitle": "Auth Controller \"after each\" hook in \"Auth Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "cee14693-36c8-471d-bad7-43beb410a9a1",
              "parentUUID": "772de56d-bd68-42cc-9971-9d4b554c4311",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "6cfe852b-eb18-4ff1-9e4d-25b8d908a412",
              "title": "POST /auth/register",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/authController.test.js",
              "file": "/test/rest/controller/authController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register a new user successfully",
                  "fullTitle": "Auth Controller POST /auth/register should register a new user successfully",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(UserModel, 'findByUsername').returns(null);\nconst createUserStub = sinon.stub(UserModel, 'createUser').returns({ id: 1, email: 'testuser' });\nconst res = await request(app)\n  .post('/auth/register')\n  .send({ email: 'testuser', password: 'password123' });\nexpect(res.status).to.equal(201);\nexpect(res.body.message).to.equal('Usuário cadastrado com sucesso');\nexpect(createUserStub.calledOnce).to.be.true;",
                  "err": {
                    "message": "TypeError: Cannot stub non-existent property findByUsername",
                    "estack": "TypeError: Cannot stub non-existent property findByUsername\n    at Function.stub (node_modules/sinon/lib/sinon/stub.js:82:15)\n    at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:436:39)\n    at Context.<anonymous> (test/rest/controller/authController.test.js:18:13)\n    at process.processImmediate (node:internal/timers:485:21)",
                    "diff": null
                  },
                  "uuid": "7d58e0b2-0382-4fb7-aa51-215fee611e8b",
                  "parentUUID": "6cfe852b-eb18-4ff1-9e4d-25b8d908a412",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if username already exists",
                  "fullTitle": "Auth Controller POST /auth/register should return 400 if username already exists",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(UserModel, 'findByUsername').returns({ id: 1, email: 'testuser' });\nconst res = await request(app)\n  .post('/auth/register')\n  .send({ email: 'testuser', password: 'password123' });\nexpect(res.status).to.equal(400);\nexpect(res.body.message).to.equal('O usuário já existe');",
                  "err": {
                    "message": "TypeError: Cannot stub non-existent property findByUsername",
                    "estack": "TypeError: Cannot stub non-existent property findByUsername\n    at Function.stub (node_modules/sinon/lib/sinon/stub.js:82:15)\n    at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:436:39)\n    at Context.<anonymous> (test/rest/controller/authController.test.js:31:13)\n    at process.processImmediate (node:internal/timers:485:21)",
                    "diff": null
                  },
                  "uuid": "2217ca86-02bf-4142-ae7d-b85770501278",
                  "parentUUID": "6cfe852b-eb18-4ff1-9e4d-25b8d908a412",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if username or password are not provided",
                  "fullTitle": "Auth Controller POST /auth/register should return 400 if username or password are not provided",
                  "timedOut": false,
                  "duration": 21,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .post('/auth/register')\n  .send({ email: 'testuser' });\nexpect(res.status).to.equal(400);\nexpect(res.body.message).to.equal('Usuário e senha são obrigatórios');",
                  "err": {
                    "message": "AssertionError: expected 'Email e senha são obrigatórios' to equal 'Usuário e senha são obrigatórios'",
                    "estack": "AssertionError: expected 'Email e senha são obrigatórios' to equal 'Usuário e senha são obrigatórios'\n    at Context.<anonymous> (test/rest/controller/authController.test.js:47:35)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": "- Email e senha são obrigatórios\n+ Usuário e senha são obrigatórios\n"
                  },
                  "uuid": "7b490ced-284d-4be5-8d22-aaf2cd676149",
                  "parentUUID": "6cfe852b-eb18-4ff1-9e4d-25b8d908a412",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "7d58e0b2-0382-4fb7-aa51-215fee611e8b",
                "2217ca86-02bf-4142-ae7d-b85770501278",
                "7b490ced-284d-4be5-8d22-aaf2cd676149"
              ],
              "pending": [],
              "skipped": [],
              "duration": 22,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "8afedde8-7bfa-4635-a01f-b483edb6d5e4",
              "title": "POST /auth/login",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/authController.test.js",
              "file": "/test/rest/controller/authController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should login successfully and return a token",
                  "fullTitle": "Auth Controller POST /auth/login should login successfully and return a token",
                  "timedOut": false,
                  "duration": 79,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = await bcrypt.hash('password123', 10);\nconst user = { id: 1, email: 'testuser', password: hashedPassword };\nsinon.stub(UserModel, 'findByUsername').returns(user);\nconst res = await request(app)\n  .post('/auth/login')\n  .send({ email: 'testuser', password: 'password123' });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('token');",
                  "err": {
                    "message": "TypeError: Cannot stub non-existent property findByUsername",
                    "estack": "TypeError: Cannot stub non-existent property findByUsername\n    at Function.stub (node_modules/sinon/lib/sinon/stub.js:82:15)\n    at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:436:39)\n    at Context.<anonymous> (test/rest/controller/authController.test.js:56:13)",
                    "diff": null
                  },
                  "uuid": "3bc8b2a3-a34a-443e-8986-7330d64f8344",
                  "parentUUID": "8afedde8-7bfa-4635-a01f-b483edb6d5e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for invalid credentials (user not found)",
                  "fullTitle": "Auth Controller POST /auth/login should return 401 for invalid credentials (user not found)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(UserModel, 'findByUsername').returns(null);\nconst res = await request(app)\n  .post('/auth/login')\n  .send({ email: 'wronguser', password: 'password123' });\nexpect(res.status).to.equal(401);\nexpect(res.body.message).to.equal('Credenciais inválidas');",
                  "err": {
                    "message": "TypeError: Cannot stub non-existent property findByUsername",
                    "estack": "TypeError: Cannot stub non-existent property findByUsername\n    at Function.stub (node_modules/sinon/lib/sinon/stub.js:82:15)\n    at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:436:39)\n    at Context.<anonymous> (test/rest/controller/authController.test.js:67:13)\n    at process.processImmediate (node:internal/timers:485:21)",
                    "diff": null
                  },
                  "uuid": "fa0234d8-5a88-4d8d-bc18-2f4985531191",
                  "parentUUID": "8afedde8-7bfa-4635-a01f-b483edb6d5e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for invalid credentials (wrong password)",
                  "fullTitle": "Auth Controller POST /auth/login should return 401 for invalid credentials (wrong password)",
                  "timedOut": false,
                  "duration": 69,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = await bcrypt.hash('password123', 10);\nconst user = { id: 1, email: 'testuser', password: hashedPassword };\nsinon.stub(UserModel, 'findByUsername').returns(user);\nconst res = await request(app)\n  .post('/auth/login')\n  .send({ email: 'testuser', password: 'wrongpassword' });\nexpect(res.status).to.equal(401);\nexpect(res.body.message).to.equal('Credenciais inválidas');",
                  "err": {
                    "message": "TypeError: Cannot stub non-existent property findByUsername",
                    "estack": "TypeError: Cannot stub non-existent property findByUsername\n    at Function.stub (node_modules/sinon/lib/sinon/stub.js:82:15)\n    at Sandbox.stub (node_modules/sinon/lib/sinon/sandbox.js:436:39)\n    at Context.<anonymous> (test/rest/controller/authController.test.js:81:13)",
                    "diff": null
                  },
                  "uuid": "01feaefd-7aa6-4d46-ab3a-3a3ccdc7990d",
                  "parentUUID": "8afedde8-7bfa-4635-a01f-b483edb6d5e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "3bc8b2a3-a34a-443e-8986-7330d64f8344",
                "fa0234d8-5a88-4d8d-bc18-2f4985531191",
                "01feaefd-7aa6-4d46-ab3a-3a3ccdc7990d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 148,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "097148dd-cf6c-4943-b0e8-e8db0a3775b3",
          "title": "To-Do Controller",
          "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/todoController.test.js",
          "file": "/test/rest/controller/todoController.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"To-Do Controller\"",
              "fullTitle": "To-Do Controller \"before each\" hook in \"To-Do Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Stub jwt.verify to simulate a logged-in user\nsinon.stub(jwt, 'verify').returns(fakeUser);",
              "err": {},
              "uuid": "1e0986e0-6cea-49bb-a6aa-adb7f27ec4d9",
              "parentUUID": "097148dd-cf6c-4943-b0e8-e8db0a3775b3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"To-Do Controller\"",
              "fullTitle": "To-Do Controller \"after each\" hook in \"To-Do Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "44228a7c-1f9a-4e55-b6f4-a23316f503b2",
              "parentUUID": "097148dd-cf6c-4943-b0e8-e8db0a3775b3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "8242c7c4-0786-4929-9bbf-b54e99c0503c",
              "title": "GET /todos",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/todoController.test.js",
              "file": "/test/rest/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return only todos belonging to the authenticated user",
                  "fullTitle": "To-Do Controller GET /todos should return only todos belonging to the authenticated user",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const userTodos = [{ id: 1, userId: fakeUser.id, title: 'User 1 Todo' }];\nsinon.stub(TodoModel, 'findAllByUserId').withArgs(fakeUser.id).returns(userTodos);\nconst res = await request(app)\n  .get('/todos')\n  .set('Authorization', 'Bearer fake-token'); // Token is needed to pass middleware header check\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array').with.lengthOf(1);\nexpect(res.body[0].title).to.equal('User 1 Todo');\nexpect(TodoModel.findAllByUserId.calledWith(fakeUser.id)).to.be.true;",
                  "err": {
                    "message": "AssertionError: expected 500 to equal 200",
                    "estack": "AssertionError: expected 500 to equal 200\n    at Context.<anonymous> (test/rest/controller/todoController.test.js:32:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": "- 500\n+ 200\n"
                  },
                  "uuid": "d673debe-1483-4de3-9a3b-049efe6035fe",
                  "parentUUID": "8242c7c4-0786-4929-9bbf-b54e99c0503c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "d673debe-1483-4de3-9a3b-049efe6035fe"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "8218f39c-9799-4ac8-ac24-378e8fea4a91",
              "title": "POST /todos",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/todoController.test.js",
              "file": "/test/rest/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new todo for the authenticated user",
                  "fullTitle": "To-Do Controller POST /todos should create a new todo for the authenticated user",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newTodo = { title: 'New Test Todo', description: 'A description' };\nconst createdTodo = { id: 10, userId: fakeUser.id, ...newTodo };\nsinon.stub(TodoModel, 'create').returns(createdTodo);\nconst res = await request(app)\n  .post('/todos')\n  .set('Authorization', 'Bearer fake-token')\n  .send(newTodo);\nexpect(res.status).to.equal(201);\nexpect(res.body.title).to.equal(newTodo.title);\nexpect(res.body.userId).to.equal(fakeUser.id);\nexpect(TodoModel.create.calledWith(sinon.match({ userId: fakeUser.id, title: newTodo.title }))).to.be.true;",
                  "err": {},
                  "uuid": "d396f4da-2b02-4f88-8dce-b18b474f4d92",
                  "parentUUID": "8218f39c-9799-4ac8-ac24-378e8fea4a91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if title is missing",
                  "fullTitle": "To-Do Controller POST /todos should return 400 if title is missing",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .post('/todos')\n  .set('Authorization', 'Bearer fake-token')\n  .send({ description: 'A description' });\nexpect(res.status).to.equal(400);\nexpect(res.body.message).to.equal('Titulo é obrigatório');",
                  "err": {},
                  "uuid": "dded10a2-0f2a-4dfd-af73-fc7f13df7ee8",
                  "parentUUID": "8218f39c-9799-4ac8-ac24-378e8fea4a91",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d396f4da-2b02-4f88-8dce-b18b474f4d92",
                "dded10a2-0f2a-4dfd-af73-fc7f13df7ee8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "d60f4053-3bf2-4ac9-9a8a-dae984adbef4",
              "title": "PUT /todos/:id",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/todoController.test.js",
              "file": "/test/rest/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a todo successfully",
                  "fullTitle": "To-Do Controller PUT /todos/:id should update a todo successfully",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = 1;\nconst updatedData = { title: 'Updated Title', completed: true };\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(todoId, fakeUser.id).returns(0); // Found at index 0\nsinon.stub(TodoModel, 'update').returns({ id: todoId, userId: fakeUser.id, ...updatedData });\nconst res = await request(app)\n  .put(`/todos/${todoId}`)\n  .set('Authorization', 'Bearer fake-token')\n  .send(updatedData);\nexpect(res.status).to.equal(200);\nexpect(res.body.title).to.equal(updatedData.title);\nexpect(res.body.completed).to.be.true;",
                  "err": {
                    "message": "AssertionError: expected 500 to equal 200",
                    "estack": "AssertionError: expected 500 to equal 200\n    at Context.<anonymous> (test/rest/controller/todoController.test.js:81:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": "- 500\n+ 200\n"
                  },
                  "uuid": "791ef440-2d6c-41db-8bef-363af8dd023e",
                  "parentUUID": "d60f4053-3bf2-4ac9-9a8a-dae984adbef4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if todo not found or does not belong to user",
                  "fullTitle": "To-Do Controller PUT /todos/:id should return 404 if todo not found or does not belong to user",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = 99;\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(todoId, fakeUser.id).returns(-1); // Not found\nconst res = await request(app)\n  .put(`/todos/${todoId}`)\n  .set('Authorization', 'Bearer fake-token')\n  .send({ title: 'Does not matter' });\nexpect(res.status).to.equal(404);\nexpect(res.body.message).to.equal('Tarefa não encontrada');",
                  "err": {
                    "message": "AssertionError: expected 500 to equal 404",
                    "estack": "AssertionError: expected 500 to equal 404\n    at Context.<anonymous> (test/rest/controller/todoController.test.js:95:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": "- 500\n+ 404\n"
                  },
                  "uuid": "7f0d40c3-6651-4fe6-bfbb-7915af9a4198",
                  "parentUUID": "d60f4053-3bf2-4ac9-9a8a-dae984adbef4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "791ef440-2d6c-41db-8bef-363af8dd023e",
                "7f0d40c3-6651-4fe6-bfbb-7915af9a4198"
              ],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "a82a5dc1-e21d-4f08-8248-200cf1a69303",
              "title": "DELETE /todos/:id",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/todoController.test.js",
              "file": "/test/rest/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a todo successfully",
                  "fullTitle": "To-Do Controller DELETE /todos/:id should delete a todo successfully",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = 1;\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(todoId, fakeUser.id).returns(0); // Found\nconst removeStub = sinon.stub(TodoModel, 'remove');\nconst res = await request(app)\n  .delete(`/api/todos/${todoId}`)\n  .set('Authorization', 'Bearer fake-token');\nexpect(res.status).to.equal(204);\nexpect(removeStub.calledOnce).to.be.true;",
                  "err": {
                    "message": "AssertionError: expected 404 to equal 204",
                    "estack": "AssertionError: expected 404 to equal 204\n    at Context.<anonymous> (test/rest/controller/todoController.test.js:110:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": "- 404\n+ 204\n"
                  },
                  "uuid": "56fd4d82-fe9a-4083-8e8e-3f0c6bd7fdc9",
                  "parentUUID": "a82a5dc1-e21d-4f08-8248-200cf1a69303",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if todo to delete is not found",
                  "fullTitle": "To-Do Controller DELETE /todos/:id should return 404 if todo to delete is not found",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = 99;\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(todoId, fakeUser.id).returns(-1); // Not found\nconst res = await request(app)\n  .delete(`/todos/${todoId}`)\n  .set('Authorization', 'Bearer fake-token');\nexpect(res.status).to.equal(404);",
                  "err": {
                    "message": "AssertionError: expected 500 to equal 404",
                    "estack": "AssertionError: expected 500 to equal 404\n    at Context.<anonymous> (test/rest/controller/todoController.test.js:122:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": "- 500\n+ 404\n"
                  },
                  "uuid": "c356747a-14c5-4013-b0aa-9632ecd03a2c",
                  "parentUUID": "a82a5dc1-e21d-4f08-8248-200cf1a69303",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "56fd4d82-fe9a-4083-8e8e-3f0c6bd7fdc9",
                "c356747a-14c5-4013-b0aa-9632ecd03a2c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "f7d92190-b3cc-4420-abfb-216aa0e7e5b9",
          "title": "Auth API",
          "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/auth.test.js",
          "file": "/test/rest/external/auth.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ae5c0be1-d2b6-4bde-841b-6127fcc11e80",
              "title": "POST /auth/register",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/auth.test.js",
              "file": "/test/rest/external/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /auth/register\"",
                  "fullTitle": "Auth API POST /auth/register \"before each\" hook in \"POST /auth/register\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nTodo.clear();",
                  "err": {},
                  "uuid": "af830648-9fc5-46fd-8ee9-5316780a20e1",
                  "parentUUID": "ae5c0be1-d2b6-4bde-841b-6127fcc11e80",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register a new user successfully",
                  "fullTitle": "Auth API POST /auth/register should register a new user successfully",
                  "timedOut": false,
                  "duration": 8,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .post('/auth/register')\n  .send({ email: \"teste@teste.com\", password: \"123456\" });\nexpect(res.status).to.equal(201);",
                  "err": {
                    "message": "AssertionError: expected 409 to equal 201",
                    "estack": "AssertionError: expected 409 to equal 201\n    at Context.<anonymous> (test/rest/external/auth.test.js:25:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": "- 409\n+ 201\n"
                  },
                  "uuid": "95dabd4a-68be-4d1d-903d-cc7118818323",
                  "parentUUID": "ae5c0be1-d2b6-4bde-841b-6127fcc11e80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 409 if email already exists",
                  "fullTitle": "Auth API POST /auth/register should return 409 if email already exists",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await api\n  .post('/auth/register')\n  .send({ email: 'teste@teste.com', password: '123456' });\nconst res = await api\n  .post('/auth/register')\n  .send({ email: 'teste@teste.com', password: '123456' });\nexpect(res.status).to.equal(409);\n//expect(res.body.message).to.equal('O usuário já existe');",
                  "err": {},
                  "uuid": "0d1ee81f-5462-406e-898b-a9b70288aad3",
                  "parentUUID": "ae5c0be1-d2b6-4bde-841b-6127fcc11e80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if email or password are not provided",
                  "fullTitle": "Auth API POST /auth/register should return 400 if email or password are not provided",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .post('/auth/register')\n  .send({ email: 'teste@teste.com' });\nexpect(res.status).to.equal(400);\n//expect(res.body.message).to.equal('Email e senha são obrigatórios');",
                  "err": {},
                  "uuid": "30b04575-f9b2-4277-b5f5-cec67b59efd5",
                  "parentUUID": "ae5c0be1-d2b6-4bde-841b-6127fcc11e80",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d1ee81f-5462-406e-898b-a9b70288aad3",
                "30b04575-f9b2-4277-b5f5-cec67b59efd5"
              ],
              "failures": [
                "95dabd4a-68be-4d1d-903d-cc7118818323"
              ],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "9314765c-d5e5-49dc-ba80-a375d378fe71",
              "title": "POST /auth/login",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/auth.test.js",
              "file": "/test/rest/external/auth.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"POST /auth/login\"",
                  "fullTitle": "Auth API POST /auth/login \"before all\" hook in \"POST /auth/login\"",
                  "timedOut": false,
                  "duration": 72,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create a user for login tests\nawait api.post('/auth/register').send({ email, password });",
                  "err": {},
                  "uuid": "642f32d5-fa3a-4d3b-b4c3-c014303523a1",
                  "parentUUID": "9314765c-d5e5-49dc-ba80-a375d378fe71",
                  "isHook": true,
                  "skipped": false
                },
                {
                  "title": "\"before each\" hook in \"POST /auth/login\"",
                  "fullTitle": "Auth API POST /auth/login \"before each\" hook in \"POST /auth/login\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nTodo.clear();",
                  "err": {},
                  "uuid": "84a2fa6a-7786-4a60-8ed5-c9c976544b88",
                  "parentUUID": "9314765c-d5e5-49dc-ba80-a375d378fe71",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should login successfully and return a token",
                  "fullTitle": "Auth API POST /auth/login should login successfully and return a token",
                  "timedOut": false,
                  "duration": 71,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .post('/auth/login')\n  .send({ email, password });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('token');",
                  "err": {},
                  "uuid": "6019a195-d5eb-4a49-9ae8-5c2d614c37af",
                  "parentUUID": "9314765c-d5e5-49dc-ba80-a375d378fe71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for invalid credentials (user not found)",
                  "fullTitle": "Auth API POST /auth/login should return 401 for invalid credentials (user not found)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .post('/auth/login')\n  .send({ email: 'wrong@teste.com', password: '123456' });\nexpect(res.status).to.equal(401);\n//expect(res.body.message).to.equal('Credenciais inválidas');",
                  "err": {},
                  "uuid": "4f6f3745-d9ae-4b97-b36d-f9d61346f8c8",
                  "parentUUID": "9314765c-d5e5-49dc-ba80-a375d378fe71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for invalid credentials (wrong password)",
                  "fullTitle": "Auth API POST /auth/login should return 401 for invalid credentials (wrong password)",
                  "timedOut": false,
                  "duration": 70,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .post('/auth/login')\n  .send({ email, password: 'wrongpassword' });\nexpect(res.status).to.equal(401);\n//expect(res.body.message).to.equal('Credenciais inválidas');",
                  "err": {},
                  "uuid": "bc0ca520-5273-4d42-a0e9-839e265cb1a2",
                  "parentUUID": "9314765c-d5e5-49dc-ba80-a375d378fe71",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6019a195-d5eb-4a49-9ae8-5c2d614c37af",
                "4f6f3745-d9ae-4b97-b36d-f9d61346f8c8",
                "bc0ca520-5273-4d42-a0e9-839e265cb1a2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 142,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "e7b495de-0a6a-4416-aa63-983a81cf9a6d",
          "title": "To-Do API",
          "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/todo.test.js",
          "file": "/test/rest/external/todo.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"To-Do API\"",
              "fullTitle": "To-Do API \"before all\" hook in \"To-Do API\"",
              "timedOut": false,
              "duration": 140,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await api.post('/auth/register').send({ email, password });\nconst res = await api.post('/auth/login').send({ email, password });\ntoken = res.body.token;",
              "err": {},
              "uuid": "620fbf04-8c00-4c77-b9aa-8647a0fa1e87",
              "parentUUID": "e7b495de-0a6a-4416-aa63-983a81cf9a6d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "482c1bea-7a9d-4f1f-9998-c8d93784446e",
              "title": "GET /todos",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/todo.test.js",
              "file": "/test/rest/external/todo.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"GET /todos\"",
                  "fullTitle": "To-Do API GET /todos \"before each\" hook in \"GET /todos\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nTodo.clear();",
                  "err": {},
                  "uuid": "b0b8c2f8-8f5e-4165-893e-df098af94720",
                  "parentUUID": "482c1bea-7a9d-4f1f-9998-c8d93784446e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an array of todos for the authenticated user",
                  "fullTitle": "To-Do API GET /todos should return an array of todos for the authenticated user",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ title: 'Test Todo for GET', description: 'A description' });\nconst res = await api\n  .get('/todos')\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');",
                  "err": {},
                  "uuid": "a1993c18-0f32-49bf-bba8-0235035aa8c7",
                  "parentUUID": "482c1bea-7a9d-4f1f-9998-c8d93784446e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a1993c18-0f32-49bf-bba8-0235035aa8c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "f1433a09-5d30-460c-b041-371132f88028",
              "title": "POST /todos",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/todo.test.js",
              "file": "/test/rest/external/todo.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"POST /todos\"",
                  "fullTitle": "To-Do API POST /todos \"before each\" hook in \"POST /todos\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nTodo.clear();",
                  "err": {},
                  "uuid": "7ae35a08-ee58-481b-a8d1-8382d3eca44c",
                  "parentUUID": "f1433a09-5d30-460c-b041-371132f88028",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new todo",
                  "fullTitle": "To-Do API POST /todos should create a new todo",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newTodo = { title: 'New API Test Todo', description: 'A description' };\nconst res = await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send(newTodo);\nexpect(res.status).to.equal(201);\nexpect(res.body.title).to.equal(newTodo.title);",
                  "err": {},
                  "uuid": "1566f718-819e-44c9-8910-e73ef8074280",
                  "parentUUID": "f1433a09-5d30-460c-b041-371132f88028",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if title is missing",
                  "fullTitle": "To-Do API POST /todos should return 400 if title is missing",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ description: 'A description' });\nexpect(res.status).to.equal(400);\nexpect(res.body.message).to.equal('Titulo é obrigatório');",
                  "err": {
                    "message": "AssertionError: expected undefined to equal 'Titulo é obrigatório'",
                    "estack": "AssertionError: expected undefined to equal 'Titulo é obrigatório'\n    at Context.<anonymous> (test/rest/external/todo.test.js:71:35)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": null
                  },
                  "uuid": "382431a5-7b0f-446c-98af-d86a63492e5f",
                  "parentUUID": "f1433a09-5d30-460c-b041-371132f88028",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1566f718-819e-44c9-8910-e73ef8074280"
              ],
              "failures": [
                "382431a5-7b0f-446c-98af-d86a63492e5f"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "062cef61-4e9c-4c83-9fe6-3c0914f0ae2b",
              "title": "PUT /todos/:id",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/todo.test.js",
              "file": "/test/rest/external/todo.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"PUT /todos/:id\"",
                  "fullTitle": "To-Do API PUT /todos/:id \"before all\" hook in \"PUT /todos/:id\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ title: 'Todo to be updated', description: '...' });\ntodoId = res.body.id;",
                  "err": {},
                  "uuid": "9ab5ae73-3c4c-4734-9b9d-ed0dc3a5d771",
                  "parentUUID": "062cef61-4e9c-4c83-9fe6-3c0914f0ae2b",
                  "isHook": true,
                  "skipped": false
                },
                {
                  "title": "\"before each\" hook in \"PUT /todos/:id\"",
                  "fullTitle": "To-Do API PUT /todos/:id \"before each\" hook in \"PUT /todos/:id\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nTodo.clear();",
                  "err": {},
                  "uuid": "c23c9535-238d-4917-8826-cf8c15dbb4b3",
                  "parentUUID": "062cef61-4e9c-4c83-9fe6-3c0914f0ae2b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a todo successfully",
                  "fullTitle": "To-Do API PUT /todos/:id should update a todo successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const updatedData = { title: 'Updated Title', completed: true };\nconst res = await api\n  .put(`/todos/${todoId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(updatedData);\nexpect(res.status).to.equal(200);\nexpect(res.body.title).to.equal(updatedData.title);\nexpect(res.body.completed).to.be.true;",
                  "err": {
                    "message": "AssertionError: expected 404 to equal 200",
                    "estack": "AssertionError: expected 404 to equal 200\n    at Context.<anonymous> (test/rest/external/todo.test.js:99:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": "- 404\n+ 200\n"
                  },
                  "uuid": "09f74e87-bbb5-4b86-9fea-dd336c9ab975",
                  "parentUUID": "062cef61-4e9c-4c83-9fe6-3c0914f0ae2b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if todo not found",
                  "fullTitle": "To-Do API PUT /todos/:id should return 404 if todo not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .put(`/todos/9999`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({ title: 'Does not matter' });\nexpect(res.status).to.equal(404);\n//expect(res.body.message).to.equal('Tarefa não encontrada');",
                  "err": {},
                  "uuid": "a43162d9-1600-44ec-8216-faf6b50a421b",
                  "parentUUID": "062cef61-4e9c-4c83-9fe6-3c0914f0ae2b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a43162d9-1600-44ec-8216-faf6b50a421b"
              ],
              "failures": [
                "09f74e87-bbb5-4b86-9fea-dd336c9ab975"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "085090b2-6c3e-45b4-b645-226382eef4d8",
              "title": "DELETE /todos/:id",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/todo.test.js",
              "file": "/test/rest/external/todo.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"DELETE /todos/:id\"",
                  "fullTitle": "To-Do API DELETE /todos/:id \"before all\" hook in \"DELETE /todos/:id\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ title: 'Todo to be deleted', description: '...' });\ntodoId = res.body.id;",
                  "err": {},
                  "uuid": "1d5bd5fa-bb5a-485e-a6bb-4035dc672293",
                  "parentUUID": "085090b2-6c3e-45b4-b645-226382eef4d8",
                  "isHook": true,
                  "skipped": false
                },
                {
                  "title": "\"before each\" hook in \"DELETE /todos/:id\"",
                  "fullTitle": "To-Do API DELETE /todos/:id \"before each\" hook in \"DELETE /todos/:id\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nTodo.clear();",
                  "err": {},
                  "uuid": "83033ee9-8226-4b4a-8832-6924b6e8b766",
                  "parentUUID": "085090b2-6c3e-45b4-b645-226382eef4d8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a todo successfully",
                  "fullTitle": "To-Do API DELETE /todos/:id should delete a todo successfully",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .delete(`/todos/${todoId}`)\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(204);",
                  "err": {},
                  "uuid": "885e0168-f8fd-4ad3-8aef-cf846fd6fdcd",
                  "parentUUID": "085090b2-6c3e-45b4-b645-226382eef4d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if todo not found",
                  "fullTitle": "To-Do API DELETE /todos/:id should return 404 if todo not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .delete(`/todos/9999`)\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "d15ceefd-a7b9-408b-b837-05b2e1bde770",
                  "parentUUID": "085090b2-6c3e-45b4-b645-226382eef4d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "885e0168-f8fd-4ad3-8aef-cf846fd6fdcd",
                "d15ceefd-a7b9-408b-b837-05b2e1bde770"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}
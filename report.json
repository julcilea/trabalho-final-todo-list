{
  "stats": {
    "suites": 8,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-07T05:23:11.967Z",
    "end": "2025-09-07T05:23:12.786Z",
    "duration": 819,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d0b9cc28-65d7-4402-903b-15db841b1e9b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "00e4d3d2-f96a-453b-9780-c649aece95a2",
          "title": "Auth API",
          "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/rest/external/auth.test.js",
          "file": "/test/rest/external/auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Auth API\"",
              "fullTitle": "Auth API \"before each\" hook in \"Auth API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "User.clear();\nTodo.clear();",
              "err": {},
              "uuid": "71d8ee2c-71a4-4822-9ed7-ad7e0481e264",
              "parentUUID": "00e4d3d2-f96a-453b-9780-c649aece95a2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7712c74e-4e5a-4b38-97ac-5f25c4952720",
              "title": "POST /auth/register",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/rest/external/auth.test.js",
              "file": "/test/rest/external/auth.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register a new user successfully",
                  "fullTitle": "Auth API POST /auth/register should register a new user successfully",
                  "timedOut": false,
                  "duration": 124,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nconst res = await api\n  .post('/auth/register')\n  .send({ email: `test_get_todos_${Date.now()}@teste.com`, password: \"123456\" });\nexpect(res.status).to.equal(201);\nexpect(res.body.message).to.equal('Usuário cadastrado com sucesso');",
                  "err": {},
                  "uuid": "62b55bfd-13e5-42e1-aa03-e16065a329d0",
                  "parentUUID": "7712c74e-4e5a-4b38-97ac-5f25c4952720",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 409 if email already exists",
                  "fullTitle": "Auth API POST /auth/register should return 409 if email already exists",
                  "timedOut": false,
                  "duration": 116,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nawait api\n  .post('/auth/register')\n  .send({ email: 'duplicate@teste.com', password: '123456' });\nconst res = await api\n  .post('/auth/register')\n  .send({ email: 'duplicate@teste.com', password: '123456' });\nexpect(res.status).to.equal(409);\nexpect(res.body.message).to.equal('O usuário já existe');",
                  "err": {},
                  "uuid": "b03cc95d-245f-4c9e-89a1-c72b6f427bfc",
                  "parentUUID": "7712c74e-4e5a-4b38-97ac-5f25c4952720",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if email or password are not provided",
                  "fullTitle": "Auth API POST /auth/register should return 400 if email or password are not provided",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .post('/auth/register')\n  .send({ email: 'teste@teste.com' });\nexpect(res.status).to.equal(400);\nexpect(res.body.message).to.equal('Email e senha são obrigatórios');",
                  "err": {},
                  "uuid": "01b08c59-ee59-4380-87a5-7efc6652b1f5",
                  "parentUUID": "7712c74e-4e5a-4b38-97ac-5f25c4952720",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "62b55bfd-13e5-42e1-aa03-e16065a329d0",
                "b03cc95d-245f-4c9e-89a1-c72b6f427bfc",
                "01b08c59-ee59-4380-87a5-7efc6652b1f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 242,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "ca5ec126-a54b-41ec-a409-d7b311c1a7e4",
              "title": "POST /auth/login",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/rest/external/auth.test.js",
              "file": "/test/rest/external/auth.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should login successfully and return a token",
                  "fullTitle": "Auth API POST /auth/login should login successfully and return a token",
                  "timedOut": false,
                  "duration": 171,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nconst email = `test_login_success_${Date.now()}@teste.com`;\nconst password = '123456';\nawait api\n  .post('/auth/register')\n  .send({ email, password });\nconst res = await api\n  .post('/auth/login')\n  .send({ email, password });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('token');",
                  "err": {},
                  "uuid": "ae1b027c-2ebc-46d4-8782-ba5e3adb5d3a",
                  "parentUUID": "ca5ec126-a54b-41ec-a409-d7b311c1a7e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for invalid credentials (user not found)",
                  "fullTitle": "Auth API POST /auth/login should return 401 for invalid credentials (user not found)",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nconst res = await api\n  .post('/auth/login')\n  .send({ email: `nonexistent_${Date.now()}@teste.com`, password: '123456' });\nexpect(res.status).to.equal(401);\nexpect(res.body.message).to.equal('Credenciais inválidas');",
                  "err": {},
                  "uuid": "7a4efb70-4904-41ac-849c-4d5ef5ec0642",
                  "parentUUID": "ca5ec126-a54b-41ec-a409-d7b311c1a7e4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for invalid credentials (wrong password)",
                  "fullTitle": "Auth API POST /auth/login should return 401 for invalid credentials (wrong password)",
                  "timedOut": false,
                  "duration": 168,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nconst email = `test_login_wrong_pwd_${Date.now()}@teste.com`;\nconst password = '123456';\nawait api\n  .post('/auth/register')\n  .send({ email, password });\nconst res = await api\n  .post('/auth/login')\n  .send({ email, password: 'wrongpassword' });\nexpect(res.status).to.equal(401);\nexpect(res.body.message).to.equal('Credenciais inválidas');",
                  "err": {},
                  "uuid": "c70df9b3-bab4-405f-b4c6-16977997d10d",
                  "parentUUID": "ca5ec126-a54b-41ec-a409-d7b311c1a7e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae1b027c-2ebc-46d4-8782-ba5e3adb5d3a",
                "7a4efb70-4904-41ac-849c-4d5ef5ec0642",
                "c70df9b3-bab4-405f-b4c6-16977997d10d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 341,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "38023458-15ed-42ab-a960-eff29ad44a7f",
          "title": "To-Do API",
          "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/rest/external/todo.test.js",
          "file": "/test/rest/external/todo.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"To-Do API\"",
              "fullTitle": "To-Do API \"before all\" hook in \"To-Do API\"",
              "timedOut": false,
              "duration": 197,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "User.clear();\nTodo.clear();\nconst email = `test_get_todos_${Date.now()}@teste.com`;\nconst password = 'password123';\nawait api.post('/auth/register').send({ email, password });\nconst loginRes = await api.post('/auth/login').send({ email, password });\ntoken = loginRes.body.token;",
              "err": {},
              "uuid": "4be82451-8b4b-46c9-9a66-7a2510447f47",
              "parentUUID": "38023458-15ed-42ab-a960-eff29ad44a7f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "be0f4e1c-296a-41ca-975a-4794aa448ec0",
              "title": "GET /todos",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/rest/external/todo.test.js",
              "file": "/test/rest/external/todo.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an array of todos for the authenticated user",
                  "fullTitle": "To-Do API GET /todos should return an array of todos for the authenticated user",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ title: 'Test Todo for GET' });\nconst res = await api\n  .get('/todos')\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body.length).to.be.at.least(1);\nexpect(res.body[0].title).to.equal('Test Todo for GET');",
                  "err": {},
                  "uuid": "3126a064-6862-4075-b31a-ed98f02afb4d",
                  "parentUUID": "be0f4e1c-296a-41ca-975a-4794aa448ec0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3126a064-6862-4075-b31a-ed98f02afb4d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "62e46927-7e7e-43af-973b-b5f849b10241",
              "title": "POST /todos",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/rest/external/todo.test.js",
              "file": "/test/rest/external/todo.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new todo",
                  "fullTitle": "To-Do API POST /todos should create a new todo",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newTodo = { title: 'New API Test Todo' };\nconst res = await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send(newTodo);\nexpect(res.status).to.equal(201);\nexpect(res.body.title).to.equal(newTodo.title);",
                  "err": {},
                  "uuid": "fedb3149-e519-493f-bb9b-3b449e5da2a4",
                  "parentUUID": "62e46927-7e7e-43af-973b-b5f849b10241",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if title is missing",
                  "fullTitle": "To-Do API POST /todos should return 400 if title is missing",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ description: 'No title provided' });\nexpect(res.status).to.equal(400);\nexpect(res.body.message).to.equal('Titulo é obrigatório');",
                  "err": {},
                  "uuid": "10852f8f-67df-434e-a471-be5853f754f1",
                  "parentUUID": "62e46927-7e7e-43af-973b-b5f849b10241",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fedb3149-e519-493f-bb9b-3b449e5da2a4",
                "10852f8f-67df-434e-a471-be5853f754f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "de2cfdfa-9a10-4242-b74f-8f4df8551592",
              "title": "PUT /todos/:id",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/rest/external/todo.test.js",
              "file": "/test/rest/external/todo.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"PUT /todos/:id\"",
                  "fullTitle": "To-Do API PUT /todos/:id \"before each\" hook in \"PUT /todos/:id\"",
                  "timedOut": false,
                  "duration": 2,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newTodo = { title: 'New API Test Todo', description: 'Description' };\nconst createRes = await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send(newTodo);\ntodoId = createRes.body.id;",
                  "err": {},
                  "uuid": "736b3e8d-dc6e-41c6-a12d-1a8ce847288c",
                  "parentUUID": "de2cfdfa-9a10-4242-b74f-8f4df8551592",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a todo successfully",
                  "fullTitle": "To-Do API PUT /todos/:id should update a todo successfully",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedData = { title: 'Updated Title', description: 'Updated Description', completed: true };\nconst res = await api\n  .put(`/todos/${todoId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(updatedData);\nexpect(res.status).to.equal(200);\nexpect(res.body.title).to.equal(updatedData.title);\nexpect(res.body.completed).to.be.true;",
                  "err": {},
                  "uuid": "58e585bd-6e9d-43b5-920c-1c283f5e75ba",
                  "parentUUID": "de2cfdfa-9a10-4242-b74f-8f4df8551592",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if todo not found",
                  "fullTitle": "To-Do API PUT /todos/:id should return 404 if todo not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nonExistentId = 9999;\nconst res = await api\n  .put(`/todos/${nonExistentId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({ title: 'Does not matter' });\nexpect(res.status).to.equal(404);\nexpect(res.body.message).to.equal('Tarefa não encontrada');",
                  "err": {},
                  "uuid": "6d602a55-8888-4b75-b1c5-26a8cd0bf2f0",
                  "parentUUID": "de2cfdfa-9a10-4242-b74f-8f4df8551592",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "58e585bd-6e9d-43b5-920c-1c283f5e75ba",
                "6d602a55-8888-4b75-b1c5-26a8cd0bf2f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "1b7080ca-c970-428f-8a77-9e2be5627a20",
              "title": "DELETE /todos/:id",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/rest/external/todo.test.js",
              "file": "/test/rest/external/todo.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a todo successfully",
                  "fullTitle": "To-Do API DELETE /todos/:id should delete a todo successfully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const createRes = await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ title: 'Todo to be deleted' });\nconst todoId = createRes.body.id;\nconst res = await api\n  .delete(`/todos/${todoId}`)\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(204);",
                  "err": {},
                  "uuid": "7c5680d6-c3aa-4e92-b732-c04c4e806838",
                  "parentUUID": "1b7080ca-c970-428f-8a77-9e2be5627a20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if todo not found",
                  "fullTitle": "To-Do API DELETE /todos/:id should return 404 if todo not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .delete(`/todos/9999`)\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(404);\nexpect(res.body.message).to.equal('Tarefa não encontrada');",
                  "err": {},
                  "uuid": "6690d543-3dd2-4698-9b2d-adec631b44f2",
                  "parentUUID": "1b7080ca-c970-428f-8a77-9e2be5627a20",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c5680d6-c3aa-4e92-b732-c04c4e806838",
                "6690d543-3dd2-4698-9b2d-adec631b44f2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./",
        "reportFilename": "report",
        "overwrite": "true",
        "html": "true",
        "json": "true"
      },
      "version": "6.2.0"
    }
  }
}
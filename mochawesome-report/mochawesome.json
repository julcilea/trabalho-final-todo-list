{
  "stats": {
    "suites": 12,
    "tests": 19,
    "passes": 14,
    "pending": 0,
    "failures": 5,
    "start": "2025-09-07T04:49:11.005Z",
    "end": "2025-09-07T04:49:11.518Z",
    "duration": 513,
    "testsRegistered": 26,
    "passPercent": 53.84615384615385,
    "pendingPercent": 0,
    "other": 1,
    "hasOther": true,
    "skipped": 7,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "2d88a57b-0500-4536-b08a-1d893c0a5e06",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b9a2eb63-cd75-4d3e-b575-28cbfc93d46d",
          "title": "Auth Controller",
          "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/authController.test.js",
          "file": "/test/rest/controller/authController.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Auth Controller\"",
              "fullTitle": "Auth Controller \"after each\" hook in \"Auth Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "c80dc1b6-44d9-4792-a421-5860e6620a67",
              "parentUUID": "b9a2eb63-cd75-4d3e-b575-28cbfc93d46d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "94418057-d3ac-4c31-8fcd-e9a65d2064fd",
              "title": "POST /auth/register",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/authController.test.js",
              "file": "/test/rest/controller/authController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register a new user successfully",
                  "fullTitle": "Auth Controller POST /auth/register should register a new user successfully",
                  "timedOut": false,
                  "duration": 103,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(UserModel, 'findByEmail').returns(null);\nconst createUserStub = sinon.stub(UserModel, 'createUser').returns({ id: 1, email: 'testuser@example.com' });\nconst res = await request(app)\n  .post('/auth/register')\n  .send({ email: 'testuser@example.com', password: 'password123' });\nexpect(res.status).to.equal(201);\nexpect(res.body.message).to.equal('Usuário cadastrado com sucesso');\nexpect(createUserStub.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "6036290c-951a-4612-aa31-694934151dbc",
                  "parentUUID": "94418057-d3ac-4c31-8fcd-e9a65d2064fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 409 if email already exists",
                  "fullTitle": "Auth Controller POST /auth/register should return 409 if email already exists",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(UserModel, 'findByEmail').returns({ id: 1, email: 'testuser@example.com' });\nconst res = await request(app)\n  .post('/auth/register')\n  .send({ email: 'testuser@example.com', password: 'password123' });\nexpect(res.status).to.equal(409);\nexpect(res.body.message).to.equal('O usuário já existe');",
                  "err": {},
                  "uuid": "c60c5f56-e0c2-4eaa-a068-86800e82becd",
                  "parentUUID": "94418057-d3ac-4c31-8fcd-e9a65d2064fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if email or password are not provided",
                  "fullTitle": "Auth Controller POST /auth/register should return 400 if email or password are not provided",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .post('/auth/register')\n  .send({ email: 'testuser@example.com' });\nexpect(res.status).to.equal(400);\nexpect(res.body.message).to.equal('Email e senha são obrigatórios');",
                  "err": {},
                  "uuid": "18a7dbde-ae5b-4cf0-bca7-76c548f1cf23",
                  "parentUUID": "94418057-d3ac-4c31-8fcd-e9a65d2064fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6036290c-951a-4612-aa31-694934151dbc",
                "c60c5f56-e0c2-4eaa-a068-86800e82becd",
                "18a7dbde-ae5b-4cf0-bca7-76c548f1cf23"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 109,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "31292951-94fe-4f24-a68a-446f3454003a",
              "title": "POST /auth/login",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/authController.test.js",
              "file": "/test/rest/controller/authController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should login successfully and return a token",
                  "fullTitle": "Auth Controller POST /auth/login should login successfully and return a token",
                  "timedOut": false,
                  "duration": 141,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = await bcrypt.hash('password123', 10);\nconst user = { id: 1, email: 'testuser@example.com', password: hashedPassword };\nsinon.stub(UserModel, 'findByEmail').returns(user);\nconst res = await request(app)\n  .post('/auth/login')\n  .send({ email: 'testuser@example.com', password: 'password123' });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('token');",
                  "err": {},
                  "uuid": "d971c521-8985-4b9e-89bb-9bb647749656",
                  "parentUUID": "31292951-94fe-4f24-a68a-446f3454003a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for invalid credentials (user not found)",
                  "fullTitle": "Auth Controller POST /auth/login should return 401 for invalid credentials (user not found)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(UserModel, 'findByEmail').returns(null);\nconst res = await request(app)\n  .post('/auth/login')\n  .send({ email: 'wronguser@example.com', password: 'password123' });\nexpect(res.status).to.equal(401);\nexpect(res.body.message).to.equal('Credenciais inválidas');",
                  "err": {},
                  "uuid": "1d415997-1d70-417b-8a95-9c2e430f8b09",
                  "parentUUID": "31292951-94fe-4f24-a68a-446f3454003a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for invalid credentials (wrong password)",
                  "fullTitle": "Auth Controller POST /auth/login should return 401 for invalid credentials (wrong password)",
                  "timedOut": false,
                  "duration": 139,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = await bcrypt.hash('password123', 10);\nconst user = { id: 1, email: 'testuser@example.com', password: hashedPassword };\nsinon.stub(UserModel, 'findByEmail').returns(user);\nconst res = await request(app)\n  .post('/auth/login')\n  .send({ email: 'testuser@example.com', password: 'wrongpassword' });\nexpect(res.status).to.equal(401);\nexpect(res.body.message).to.equal('Credenciais inválidas');",
                  "err": {},
                  "uuid": "1d4e7b68-c772-427c-87a5-23c6be7ef49b",
                  "parentUUID": "31292951-94fe-4f24-a68a-446f3454003a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d971c521-8985-4b9e-89bb-9bb647749656",
                "1d415997-1d70-417b-8a95-9c2e430f8b09",
                "1d4e7b68-c772-427c-87a5-23c6be7ef49b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 283,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "39586cef-dd94-4e4b-bb82-ad32fd12a0e4",
          "title": "To-Do Controller",
          "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/todoController.test.js",
          "file": "/test/rest/controller/todoController.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"To-Do Controller\"",
              "fullTitle": "To-Do Controller \"before each\" hook in \"To-Do Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.stub(jwt, 'verify').returns(fakeUser);",
              "err": {},
              "uuid": "2dc4ce24-e304-4e6e-8d1c-cb303ccebeb7",
              "parentUUID": "39586cef-dd94-4e4b-bb82-ad32fd12a0e4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"To-Do Controller\"",
              "fullTitle": "To-Do Controller \"after each\" hook in \"To-Do Controller\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "00267c92-daa4-48c3-83d7-81827fc3a1e4",
              "parentUUID": "39586cef-dd94-4e4b-bb82-ad32fd12a0e4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "a8ff72e8-cd6a-4b92-8ee2-38464ec41711",
              "title": "GET /todos",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/todoController.test.js",
              "file": "/test/rest/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return only todos belonging to the authenticated user",
                  "fullTitle": "To-Do Controller GET /todos should return only todos belonging to the authenticated user",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userTodos = [{ id: 1, userId: fakeUser.id, title: 'User 1 Todo' }];\nsinon.stub(TodoModel, 'findAllByUserId').withArgs(fakeUser.id).returns(userTodos);\nconst res = await request(app)\n  .get('/todos')\n  .set('Authorization', 'Bearer fake-token');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array').with.lengthOf(1);\nexpect(res.body[0].title).to.equal('User 1 Todo');\nexpect(TodoModel.findAllByUserId.calledWith(fakeUser.id)).to.be.true;",
                  "err": {},
                  "uuid": "8bd9ef95-59b9-418b-a69b-b86b351c3602",
                  "parentUUID": "a8ff72e8-cd6a-4b92-8ee2-38464ec41711",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8bd9ef95-59b9-418b-a69b-b86b351c3602"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "fcadf006-59b3-4f90-bd44-8678202c3e66",
              "title": "POST /todos",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/todoController.test.js",
              "file": "/test/rest/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new todo for the authenticated user",
                  "fullTitle": "To-Do Controller POST /todos should create a new todo for the authenticated user",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newTodo = { title: 'New Test Todo', description: 'A description' };\nconst createdTodo = { id: 10, userId: fakeUser.id, ...newTodo, completed: false, createdAt: new Date() };\nsinon.stub(TodoModel, 'create').returns(createdTodo);\nconst res = await request(app)\n  .post('/todos')\n  .set('Authorization', 'Bearer fake-token')\n  .send(newTodo);\nexpect(res.status).to.equal(201);\nexpect(res.body.title).to.equal(newTodo.title);\nexpect(res.body.userId).to.equal(fakeUser.id);\nexpect(TodoModel.create.calledWith(sinon.match({ userId: fakeUser.id, title: newTodo.title }))).to.be.true;",
                  "err": {},
                  "uuid": "2887d93b-475a-45c8-8fa2-70f8589cf7ef",
                  "parentUUID": "fcadf006-59b3-4f90-bd44-8678202c3e66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if title is missing",
                  "fullTitle": "To-Do Controller POST /todos should return 400 if title is missing",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .post('/todos')\n  .set('Authorization', 'Bearer fake-token')\n  .send({ description: 'A description' });\nexpect(res.status).to.equal(400);\nexpect(res.body.message).to.equal('Titulo é obrigatório');",
                  "err": {},
                  "uuid": "514fb80a-ce8b-405c-b905-ab8ff0541503",
                  "parentUUID": "fcadf006-59b3-4f90-bd44-8678202c3e66",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2887d93b-475a-45c8-8fa2-70f8589cf7ef",
                "514fb80a-ce8b-405c-b905-ab8ff0541503"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "2c159041-49d9-428c-b36f-d934215eaf78",
              "title": "PUT /todos/:id",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/todoController.test.js",
              "file": "/test/rest/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a todo successfully",
                  "fullTitle": "To-Do Controller PUT /todos/:id should update a todo successfully",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = 1;\nconst updatedData = { title: 'Updated Title', completed: true };\nconst updatedTodo = { id: todoId, userId: fakeUser.id, ...updatedData };\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(todoId, fakeUser.id).returns(0);\nsinon.stub(TodoModel, 'update').returns(updatedTodo);\nconst res = await request(app)\n  .put(`/todos/${todoId}`)\n  .set('Authorization', 'Bearer fake-token')\n  .send(updatedData);\nexpect(res.status).to.equal(200);\nexpect(res.body.title).to.equal(updatedData.title);\nexpect(res.body.completed).to.be.true;",
                  "err": {},
                  "uuid": "144b40f7-1428-4b44-92a7-16b4da16bfd0",
                  "parentUUID": "2c159041-49d9-428c-b36f-d934215eaf78",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if todo not found",
                  "fullTitle": "To-Do Controller PUT /todos/:id should return 404 if todo not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = 99;\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(todoId, fakeUser.id).returns(-1);\nconst res = await request(app)\n  .put(`/todos/${todoId}`)\n  .set('Authorization', 'Bearer fake-token')\n  .send({ title: 'Does not matter' });\nexpect(res.status).to.equal(404);\nexpect(res.body.message).to.equal('Tarefa não encontrada');",
                  "err": {},
                  "uuid": "a9a59c0f-05ac-4134-a83e-c1da6f43988f",
                  "parentUUID": "2c159041-49d9-428c-b36f-d934215eaf78",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "144b40f7-1428-4b44-92a7-16b4da16bfd0",
                "a9a59c0f-05ac-4134-a83e-c1da6f43988f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "61501e10-2b13-4d87-9144-ebf6015d78ea",
              "title": "DELETE /todos/:id",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/todoController.test.js",
              "file": "/test/rest/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a todo successfully",
                  "fullTitle": "To-Do Controller DELETE /todos/:id should delete a todo successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = 1;\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(todoId, fakeUser.id).returns(0);\nconst removeStub = sinon.stub(TodoModel, 'remove');\nconst res = await request(app)\n  .delete(`/todos/${todoId}`)\n  .set('Authorization', 'Bearer fake-token');\nexpect(res.status).to.equal(204);\nexpect(removeStub.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "c7307ea1-c3fd-430d-a4b5-9348d558bc1e",
                  "parentUUID": "61501e10-2b13-4d87-9144-ebf6015d78ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if todo not found",
                  "fullTitle": "To-Do Controller DELETE /todos/:id should return 404 if todo not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = 99;\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(todoId, fakeUser.id).returns(-1);\nconst res = await request(app)\n  .delete(`/todos/${todoId}`)\n  .set('Authorization', 'Bearer fake-token');\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "54e19227-20bf-4bdc-ae53-ec291d45a300",
                  "parentUUID": "61501e10-2b13-4d87-9144-ebf6015d78ea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c7307ea1-c3fd-430d-a4b5-9348d558bc1e",
                "54e19227-20bf-4bdc-ae53-ec291d45a300"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "ae53eb31-46f7-47b3-9db0-577be0f9090c",
          "title": "Auth API",
          "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/auth.test.js",
          "file": "/test/rest/external/auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Auth API\"",
              "fullTitle": "Auth API \"before each\" hook in \"Auth API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "User.clear();\nTodo.clear();",
              "err": {},
              "uuid": "01678153-b2e1-48f0-a3b2-15f359f2486b",
              "parentUUID": "ae53eb31-46f7-47b3-9db0-577be0f9090c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d0cbd590-613f-432b-8fc0-8c074c002fa5",
              "title": "POST /auth/register",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/auth.test.js",
              "file": "/test/rest/external/auth.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register a new user successfully",
                  "fullTitle": "Auth API POST /auth/register should register a new user successfully",
                  "timedOut": false,
                  "duration": 77,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nconst res = await api\n  .post('/auth/register')\n  .send({ email: `test_get_todos_${Date.now()}@teste.com`, password: \"123456\" });\nexpect(res.status).to.equal(201);\nexpect(res.body).to.contain.property('token');",
                  "err": {},
                  "uuid": "a353c4d7-23e6-41ba-a904-d7457c797ed0",
                  "parentUUID": "d0cbd590-613f-432b-8fc0-8c074c002fa5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 409 if email already exists",
                  "fullTitle": "Auth API POST /auth/register should return 409 if email already exists",
                  "timedOut": false,
                  "duration": 8,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nawait api\n  .post('/auth/register')\n  .send({ email: 'duplicate@teste.com', password: '123456' });\nconst res = await api\n  .post('/auth/register')\n  .send({ email: 'duplicate@teste.com', password: '123456' });\nexpect(res.status).to.equal(409);\nexpect(res.body.error).to.equal('email already registered');",
                  "err": {
                    "message": "Error: read ECONNRESET",
                    "estack": "Error: read ECONNRESET\n    at TCP.onStreamRead (node:internal/stream_base_commons:216:20)",
                    "diff": null
                  },
                  "uuid": "16f69eb0-f210-4079-a219-bd253bf2ad8f",
                  "parentUUID": "d0cbd590-613f-432b-8fc0-8c074c002fa5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if email or password are not provided",
                  "fullTitle": "Auth API POST /auth/register should return 400 if email or password are not provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .post('/auth/register')\n  .send({ email: 'teste@teste.com' });\nexpect(res.status).to.equal(400);\nexpect(res.body.error).to.equal('email and password are required');",
                  "err": {
                    "message": "Error: ECONNREFUSED: Connection refused",
                    "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:187:20)\n    at localAssert (node_modules/supertest/lib/test.js:138:14)\n    at /home/julcilea/Documentos/PGATS/trabalho-final-todo-list/node_modules/supertest/lib/test.js:156:7\n    at Request.callback (node_modules/superagent/lib/node/index.js:857:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:780:10)\n    at ClientRequest.emit (node:events:518:28)\n    at emitErrorEvent (node:_http_client:104:11)\n    at Socket.socketErrorListener (node:_http_client:518:5)\n    at Socket.emit (node:events:518:28)\n    at emitErrorNT (node:internal/streams/destroy:170:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:129:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
                    "diff": null
                  },
                  "uuid": "86bc8b0d-613d-4f0f-9bba-21d7a63d3253",
                  "parentUUID": "d0cbd590-613f-432b-8fc0-8c074c002fa5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a353c4d7-23e6-41ba-a904-d7457c797ed0"
              ],
              "failures": [
                "16f69eb0-f210-4079-a219-bd253bf2ad8f",
                "86bc8b0d-613d-4f0f-9bba-21d7a63d3253"
              ],
              "pending": [],
              "skipped": [],
              "duration": 85,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "84caf580-10f8-4856-8b7d-5fb5ec25af8d",
              "title": "POST /auth/login",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/auth.test.js",
              "file": "/test/rest/external/auth.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should login successfully and return a token",
                  "fullTitle": "Auth API POST /auth/login should login successfully and return a token",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nconst email = `test_login_success_${Date.now()}@teste.com`;\nconst password = '123456';\nawait api\n  .post('/auth/register')\n  .send({ email, password });\nconst res = await api\n  .post('/auth/login')\n  .send({ email, password });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('token');",
                  "err": {
                    "message": "Error: ECONNREFUSED: Connection refused",
                    "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:187:20)\n    at localAssert (node_modules/supertest/lib/test.js:138:14)\n    at /home/julcilea/Documentos/PGATS/trabalho-final-todo-list/node_modules/supertest/lib/test.js:156:7\n    at Request.callback (node_modules/superagent/lib/node/index.js:857:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:780:10)\n    at ClientRequest.emit (node:events:518:28)\n    at emitErrorEvent (node:_http_client:104:11)\n    at Socket.socketErrorListener (node:_http_client:518:5)\n    at Socket.emit (node:events:518:28)\n    at emitErrorNT (node:internal/streams/destroy:170:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:129:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
                    "diff": null
                  },
                  "uuid": "289e9c1e-21be-4385-86f6-7158b5ef3973",
                  "parentUUID": "84caf580-10f8-4856-8b7d-5fb5ec25af8d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for invalid credentials (user not found)",
                  "fullTitle": "Auth API POST /auth/login should return 401 for invalid credentials (user not found)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nconst res = await api\n  .post('/auth/login')\n  .send({ email: `nonexistent_${Date.now()}@teste.com`, password: '123456' });\nexpect(res.status).to.equal(401);\nexpect(res.body.error).to.equal('invalid credentials');",
                  "err": {
                    "message": "Error: ECONNREFUSED: Connection refused",
                    "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:187:20)\n    at localAssert (node_modules/supertest/lib/test.js:138:14)\n    at /home/julcilea/Documentos/PGATS/trabalho-final-todo-list/node_modules/supertest/lib/test.js:156:7\n    at Request.callback (node_modules/superagent/lib/node/index.js:857:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:780:10)\n    at ClientRequest.emit (node:events:518:28)\n    at emitErrorEvent (node:_http_client:104:11)\n    at Socket.socketErrorListener (node:_http_client:518:5)\n    at Socket.emit (node:events:518:28)\n    at emitErrorNT (node:internal/streams/destroy:170:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:129:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
                    "diff": null
                  },
                  "uuid": "577de60e-fcda-452f-9bf3-d4d9989b84c5",
                  "parentUUID": "84caf580-10f8-4856-8b7d-5fb5ec25af8d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for invalid credentials (wrong password)",
                  "fullTitle": "Auth API POST /auth/login should return 401 for invalid credentials (wrong password)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nconst email = `test_login_wrong_pwd_${Date.now()}@teste.com`;\nconst password = '123456';\nawait api\n  .post('/auth/register')\n  .send({ email, password });\nconst res = await api\n  .post('/auth/login')\n  .send({ email, password: 'wrongpassword' });\nexpect(res.status).to.equal(401);\nexpect(res.body.error).to.equal('invalid credentials');",
                  "err": {
                    "message": "Error: ECONNREFUSED: Connection refused",
                    "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:187:20)\n    at localAssert (node_modules/supertest/lib/test.js:138:14)\n    at /home/julcilea/Documentos/PGATS/trabalho-final-todo-list/node_modules/supertest/lib/test.js:156:7\n    at Request.callback (node_modules/superagent/lib/node/index.js:857:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:780:10)\n    at ClientRequest.emit (node:events:518:28)\n    at emitErrorEvent (node:_http_client:104:11)\n    at Socket.socketErrorListener (node:_http_client:518:5)\n    at Socket.emit (node:events:518:28)\n    at emitErrorNT (node:internal/streams/destroy:170:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:129:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
                    "diff": null
                  },
                  "uuid": "7ce9d10b-fb84-46bc-9bbe-d0bab84617fe",
                  "parentUUID": "84caf580-10f8-4856-8b7d-5fb5ec25af8d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "289e9c1e-21be-4385-86f6-7158b5ef3973",
                "577de60e-fcda-452f-9bf3-d4d9989b84c5",
                "7ce9d10b-fb84-46bc-9bbe-d0bab84617fe"
              ],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "0c47d05e-0e44-4828-af24-70af2e2e75e5",
          "title": "To-Do API",
          "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/todo.test.js",
          "file": "/test/rest/external/todo.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"To-Do API\"",
              "fullTitle": "To-Do API \"before all\" hook in \"To-Do API\"",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "User.clear();\nTodo.clear();\nconst email = `test_get_todos_${Date.now()}@teste.com`;\nconst password = 'password123';\nawait api.post('/auth/register').send({ email, password });\nconst loginRes = await api.post('/auth/login').send({ email, password });\ntoken = loginRes.body.token;",
              "err": {
                "message": "Error: ECONNREFUSED: Connection refused",
                "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules/supertest/lib/test.js:187:20)\n    at localAssert (node_modules/supertest/lib/test.js:138:14)\n    at /home/julcilea/Documentos/PGATS/trabalho-final-todo-list/node_modules/supertest/lib/test.js:156:7\n    at Request.callback (node_modules/superagent/lib/node/index.js:857:3)\n    at ClientRequest.<anonymous> (node_modules/superagent/lib/node/index.js:780:10)\n    at ClientRequest.emit (node:events:518:28)\n    at emitErrorEvent (node:_http_client:104:11)\n    at Socket.socketErrorListener (node:_http_client:518:5)\n    at Socket.emit (node:events:518:28)\n    at emitErrorNT (node:internal/streams/destroy:170:8)\n    at emitErrorCloseNT (node:internal/streams/destroy:129:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)",
                "diff": null
              },
              "uuid": "5d99cf93-9299-4c82-9183-83b4559b46bc",
              "parentUUID": "0c47d05e-0e44-4828-af24-70af2e2e75e5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d7a6cebd-7b3f-4e1f-943a-cd37acc853c3",
              "title": "GET /todos",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/todo.test.js",
              "file": "/test/rest/external/todo.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an array of todos for the authenticated user",
                  "fullTitle": "To-Do API GET /todos should return an array of todos for the authenticated user",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ title: 'Test Todo for GET' });\nconst res = await api\n  .get('/todos')\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body.length).to.be.at.least(1);\nexpect(res.body[0].title).to.equal('Test Todo for GET');",
                  "err": {},
                  "uuid": "49cc3866-6389-4555-9915-a2ba0256ed66",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "49cc3866-6389-4555-9915-a2ba0256ed66"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "d47e4450-286b-4803-afaa-19bad8b644f2",
              "title": "POST /todos",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/todo.test.js",
              "file": "/test/rest/external/todo.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new todo",
                  "fullTitle": "To-Do API POST /todos should create a new todo",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newTodo = { title: 'New API Test Todo' };\nconst res = await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send(newTodo);\nexpect(res.status).to.equal(201);\nexpect(res.body.title).to.equal(newTodo.title);",
                  "err": {},
                  "uuid": "7544e5b3-27bf-48d8-98c8-4b3c43b07c7e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should return 400 if title is missing",
                  "fullTitle": "To-Do API POST /todos should return 400 if title is missing",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send(\"\");\nexpect(res.status).to.equal(400);\nexpect(res.body.error).to.equal('title is required');",
                  "err": {},
                  "uuid": "f7640133-8f1d-452c-9fa0-befb17565609",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "7544e5b3-27bf-48d8-98c8-4b3c43b07c7e",
                "f7640133-8f1d-452c-9fa0-befb17565609"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "be300d15-606c-4e54-86cf-2c1058e2f2f9",
              "title": "PUT /todos/:id",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/todo.test.js",
              "file": "/test/rest/external/todo.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "To-Do API PUT /todos/:id \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newTodo = { title: 'New API Test Todo' };\nconst createRes = await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send(newTodo);\ntodoId = createRes.body.id;",
                  "err": {},
                  "uuid": "b5abab5e-0e60-4f04-9b41-455970decf6c",
                  "parentUUID": null,
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a todo successfully",
                  "fullTitle": "To-Do API PUT /todos/:id should update a todo successfully",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedData = { title: 'Updated Title', completed: true };\nconst res = await api\n  .patch(`/todos/${todoId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(updatedData);\nexpect(res.status).to.equal(200);\nexpect(res.body.title).to.equal(updatedData.title);\nexpect(res.body.completed).to.be.true;",
                  "err": {},
                  "uuid": "0d492c24-7c3c-4291-979e-055446122dfc",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should return 404 if todo not found",
                  "fullTitle": "To-Do API PUT /todos/:id should return 404 if todo not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Use a non-existent ID\nconst nonExistentId = 9999;\nconst res = await api\n  .patch(`/todos/${nonExistentId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({ title: 'Does not matter' });\nexpect(res.status).to.equal(404);\nexpect(res.body.error).to.equal('not found');",
                  "err": {},
                  "uuid": "0755136b-6626-4bc5-bb4e-edad28132643",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "0d492c24-7c3c-4291-979e-055446122dfc",
                "0755136b-6626-4bc5-bb4e-edad28132643"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "fc1a0826-209f-4fc6-8841-5725a32b05fa",
              "title": "DELETE /todos/:id",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/todo.test.js",
              "file": "/test/rest/external/todo.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a todo successfully",
                  "fullTitle": "To-Do API DELETE /todos/:id should delete a todo successfully",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const createRes = await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ title: 'Todo to be deleted' });\nconst todoId = createRes.body.id;\nconst res = await api\n  .delete(`/todos/${todoId}`)\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(204);",
                  "err": {},
                  "uuid": "d1c5b56a-281a-42ca-a287-ea747be044e6",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should return 404 if todo not found",
                  "fullTitle": "To-Do API DELETE /todos/:id should return 404 if todo not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .delete(`/todos/9999`)\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(404);\nexpect(res.body.error).to.equal('not found');",
                  "err": {},
                  "uuid": "ee8a8489-a126-4f1c-b72a-0cadeddd38c9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [
                "d1c5b56a-281a-42ca-a287-ea747be044e6",
                "ee8a8489-a126-4f1c-b72a-0cadeddd38c9"
              ],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}
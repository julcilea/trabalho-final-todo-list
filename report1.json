{
  "stats": {
    "suites": 8,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-07T04:16:15.025Z",
    "end": "2025-09-07T04:16:15.447Z",
    "duration": 422,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "349f3a1c-d783-4a78-8e31-113d03384e72",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a6a81de1-07b6-4a56-a048-8edb6c409793",
          "title": "Auth Controller",
          "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/authController.test.js",
          "file": "/test/rest/controller/authController.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Auth Controller\"",
              "fullTitle": "Auth Controller \"after each\" hook in \"Auth Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "a9cc1ac3-2ea0-42ad-abf7-1001acdcda02",
              "parentUUID": "a6a81de1-07b6-4a56-a048-8edb6c409793",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "b04dd287-59b0-4843-9697-e997245bf2ab",
              "title": "POST /auth/register",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/authController.test.js",
              "file": "/test/rest/controller/authController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register a new user successfully",
                  "fullTitle": "Auth Controller POST /auth/register should register a new user successfully",
                  "timedOut": false,
                  "duration": 102,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(UserModel, 'findByEmail').returns(null);\nconst createUserStub = sinon.stub(UserModel, 'createUser').returns({ id: 1, email: 'testuser@example.com' });\nconst res = await request(app)\n  .post('/auth/register')\n  .send({ email: 'testuser@example.com', password: 'password123' });\nexpect(res.status).to.equal(201);\nexpect(res.body.message).to.equal('Usuário cadastrado com sucesso');\nexpect(createUserStub.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "b0838c65-6a5b-40b8-8006-155422fd6173",
                  "parentUUID": "b04dd287-59b0-4843-9697-e997245bf2ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 409 if email already exists",
                  "fullTitle": "Auth Controller POST /auth/register should return 409 if email already exists",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(UserModel, 'findByEmail').returns({ id: 1, email: 'testuser@example.com' });\nconst res = await request(app)\n  .post('/auth/register')\n  .send({ email: 'testuser@example.com', password: 'password123' });\nexpect(res.status).to.equal(409);\nexpect(res.body.message).to.equal('O usuário já existe');",
                  "err": {},
                  "uuid": "df183711-3444-4957-b81e-03934e6c7cf7",
                  "parentUUID": "b04dd287-59b0-4843-9697-e997245bf2ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if email or password are not provided",
                  "fullTitle": "Auth Controller POST /auth/register should return 400 if email or password are not provided",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .post('/auth/register')\n  .send({ email: 'testuser@example.com' });\nexpect(res.status).to.equal(400);\nexpect(res.body.message).to.equal('Email e senha são obrigatórios');",
                  "err": {},
                  "uuid": "985ab988-b69d-4157-b2aa-979ae1469a92",
                  "parentUUID": "b04dd287-59b0-4843-9697-e997245bf2ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b0838c65-6a5b-40b8-8006-155422fd6173",
                "df183711-3444-4957-b81e-03934e6c7cf7",
                "985ab988-b69d-4157-b2aa-979ae1469a92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 107,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "05074514-e285-42e1-a0e2-9aaa5491cb17",
              "title": "POST /auth/login",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/authController.test.js",
              "file": "/test/rest/controller/authController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should login successfully and return a token",
                  "fullTitle": "Auth Controller POST /auth/login should login successfully and return a token",
                  "timedOut": false,
                  "duration": 142,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = await bcrypt.hash('password123', 10);\nconst user = { id: 1, email: 'testuser@example.com', password: hashedPassword };\nsinon.stub(UserModel, 'findByEmail').returns(user);\nconst res = await request(app)\n  .post('/auth/login')\n  .send({ email: 'testuser@example.com', password: 'password123' });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('token');",
                  "err": {},
                  "uuid": "9eeb92fb-93f3-4b51-b888-eec57e0c9451",
                  "parentUUID": "05074514-e285-42e1-a0e2-9aaa5491cb17",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for invalid credentials (user not found)",
                  "fullTitle": "Auth Controller POST /auth/login should return 401 for invalid credentials (user not found)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(UserModel, 'findByEmail').returns(null);\nconst res = await request(app)\n  .post('/auth/login')\n  .send({ email: 'wronguser@example.com', password: 'password123' });\nexpect(res.status).to.equal(401);\nexpect(res.body.message).to.equal('Credenciais inválidas');",
                  "err": {},
                  "uuid": "86bed73b-5f53-4ec4-a0dc-7440ccd68fd4",
                  "parentUUID": "05074514-e285-42e1-a0e2-9aaa5491cb17",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for invalid credentials (wrong password)",
                  "fullTitle": "Auth Controller POST /auth/login should return 401 for invalid credentials (wrong password)",
                  "timedOut": false,
                  "duration": 139,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedPassword = await bcrypt.hash('password123', 10);\nconst user = { id: 1, email: 'testuser@example.com', password: hashedPassword };\nsinon.stub(UserModel, 'findByEmail').returns(user);\nconst res = await request(app)\n  .post('/auth/login')\n  .send({ email: 'testuser@example.com', password: 'wrongpassword' });\nexpect(res.status).to.equal(401);\nexpect(res.body.message).to.equal('Credenciais inválidas');",
                  "err": {},
                  "uuid": "bd8fc769-0c3f-45b8-af31-9b86e68afec1",
                  "parentUUID": "05074514-e285-42e1-a0e2-9aaa5491cb17",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9eeb92fb-93f3-4b51-b888-eec57e0c9451",
                "86bed73b-5f53-4ec4-a0dc-7440ccd68fd4",
                "bd8fc769-0c3f-45b8-af31-9b86e68afec1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 284,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "7d58f224-c63a-4f42-bf50-f44a82820af0",
          "title": "To-Do Controller",
          "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/todoController.test.js",
          "file": "/test/rest/controller/todoController.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"To-Do Controller\"",
              "fullTitle": "To-Do Controller \"before each\" hook in \"To-Do Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.stub(jwt, 'verify').returns(fakeUser);",
              "err": {},
              "uuid": "629fe7c3-ef95-40d9-acdc-edfc784f4020",
              "parentUUID": "7d58f224-c63a-4f42-bf50-f44a82820af0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"To-Do Controller\"",
              "fullTitle": "To-Do Controller \"after each\" hook in \"To-Do Controller\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "52579c9d-207b-46f5-a0d3-6bde137ce8e1",
              "parentUUID": "7d58f224-c63a-4f42-bf50-f44a82820af0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "746c7135-7d06-434d-9abf-2f9ea476425f",
              "title": "GET /todos",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/todoController.test.js",
              "file": "/test/rest/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return only todos belonging to the authenticated user",
                  "fullTitle": "To-Do Controller GET /todos should return only todos belonging to the authenticated user",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userTodos = [{ id: 1, userId: fakeUser.id, title: 'User 1 Todo' }];\nsinon.stub(TodoModel, 'findAllByUserId').withArgs(fakeUser.id).returns(userTodos);\nconst res = await request(app)\n  .get('/todos')\n  .set('Authorization', 'Bearer fake-token');\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array').with.lengthOf(1);\nexpect(res.body[0].title).to.equal('User 1 Todo');\nexpect(TodoModel.findAllByUserId.calledWith(fakeUser.id)).to.be.true;",
                  "err": {},
                  "uuid": "ff580235-ca39-4eb3-a3e4-223f4af5d613",
                  "parentUUID": "746c7135-7d06-434d-9abf-2f9ea476425f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff580235-ca39-4eb3-a3e4-223f4af5d613"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "2b682c41-12e9-4991-8f2c-801956fdc9ff",
              "title": "POST /todos",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/todoController.test.js",
              "file": "/test/rest/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new todo for the authenticated user",
                  "fullTitle": "To-Do Controller POST /todos should create a new todo for the authenticated user",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newTodo = { title: 'New Test Todo', description: 'A description' };\nconst createdTodo = { id: 10, userId: fakeUser.id, ...newTodo, completed: false, createdAt: new Date() };\nsinon.stub(TodoModel, 'create').returns(createdTodo);\nconst res = await request(app)\n  .post('/todos')\n  .set('Authorization', 'Bearer fake-token')\n  .send(newTodo);\nexpect(res.status).to.equal(201);\nexpect(res.body.title).to.equal(newTodo.title);\nexpect(res.body.userId).to.equal(fakeUser.id);\nexpect(TodoModel.create.calledWith(sinon.match({ userId: fakeUser.id, title: newTodo.title }))).to.be.true;",
                  "err": {},
                  "uuid": "7c7a7032-f163-4774-a897-f642f729df84",
                  "parentUUID": "2b682c41-12e9-4991-8f2c-801956fdc9ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if title is missing",
                  "fullTitle": "To-Do Controller POST /todos should return 400 if title is missing",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await request(app)\n  .post('/todos')\n  .set('Authorization', 'Bearer fake-token')\n  .send({ description: 'A description' });\nexpect(res.status).to.equal(400);\nexpect(res.body.message).to.equal('Titulo é obrigatório');",
                  "err": {},
                  "uuid": "df39170c-af2b-4323-b796-15af2efbef9c",
                  "parentUUID": "2b682c41-12e9-4991-8f2c-801956fdc9ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c7a7032-f163-4774-a897-f642f729df84",
                "df39170c-af2b-4323-b796-15af2efbef9c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "e150648f-8e1d-4f84-9bd8-300aa7bf7c0c",
              "title": "PUT /todos/:id",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/todoController.test.js",
              "file": "/test/rest/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a todo successfully",
                  "fullTitle": "To-Do Controller PUT /todos/:id should update a todo successfully",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = 1;\nconst updatedData = { title: 'Updated Title', completed: true };\nconst updatedTodo = { id: todoId, userId: fakeUser.id, ...updatedData };\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(todoId, fakeUser.id).returns(0);\nsinon.stub(TodoModel, 'update').returns(updatedTodo);\nconst res = await request(app)\n  .put(`/todos/${todoId}`)\n  .set('Authorization', 'Bearer fake-token')\n  .send(updatedData);\nexpect(res.status).to.equal(200);\nexpect(res.body.title).to.equal(updatedData.title);\nexpect(res.body.completed).to.be.true;",
                  "err": {},
                  "uuid": "abc9d867-c89c-4279-83e9-7fbf7d26cee7",
                  "parentUUID": "e150648f-8e1d-4f84-9bd8-300aa7bf7c0c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if todo not found",
                  "fullTitle": "To-Do Controller PUT /todos/:id should return 404 if todo not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = 99;\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(todoId, fakeUser.id).returns(-1);\nconst res = await request(app)\n  .put(`/todos/${todoId}`)\n  .set('Authorization', 'Bearer fake-token')\n  .send({ title: 'Does not matter' });\nexpect(res.status).to.equal(404);\nexpect(res.body.message).to.equal('Tarefa não encontrada');",
                  "err": {},
                  "uuid": "8e103fe2-a134-417c-8d7b-3c4fa915fa82",
                  "parentUUID": "e150648f-8e1d-4f84-9bd8-300aa7bf7c0c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "abc9d867-c89c-4279-83e9-7fbf7d26cee7",
                "8e103fe2-a134-417c-8d7b-3c4fa915fa82"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "e363b17e-150a-4ace-9066-3d5fbedb2aea",
              "title": "DELETE /todos/:id",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/controller/todoController.test.js",
              "file": "/test/rest/controller/todoController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a todo successfully",
                  "fullTitle": "To-Do Controller DELETE /todos/:id should delete a todo successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = 1;\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(todoId, fakeUser.id).returns(0);\nconst removeStub = sinon.stub(TodoModel, 'remove');\nconst res = await request(app)\n  .delete(`/todos/${todoId}`)\n  .set('Authorization', 'Bearer fake-token');\nexpect(res.status).to.equal(204);\nexpect(removeStub.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "b9dc4982-d7fb-442a-982c-8e15eb364e1b",
                  "parentUUID": "e363b17e-150a-4ace-9066-3d5fbedb2aea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if todo not found",
                  "fullTitle": "To-Do Controller DELETE /todos/:id should return 404 if todo not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const todoId = 99;\nsinon.stub(TodoModel, 'findIndexByIdAndUserId').withArgs(todoId, fakeUser.id).returns(-1);\nconst res = await request(app)\n  .delete(`/todos/${todoId}`)\n  .set('Authorization', 'Bearer fake-token');\nexpect(res.status).to.equal(404);",
                  "err": {},
                  "uuid": "c73d5aed-5a4d-4816-a293-55d4b3122b1d",
                  "parentUUID": "e363b17e-150a-4ace-9066-3d5fbedb2aea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b9dc4982-d7fb-442a-982c-8e15eb364e1b",
                "c73d5aed-5a4d-4816-a293-55d4b3122b1d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report1",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./",
        "reportFilename": "report1",
        "overwrite": "true",
        "html": "true",
        "json": "true"
      },
      "version": "6.2.0"
    }
  }
}
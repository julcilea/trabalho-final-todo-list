{
  "stats": {
    "suites": 8,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-16T00:47:03.568Z",
    "end": "2025-09-16T00:47:04.363Z",
    "duration": 795,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c8e9a03c-2560-4f79-b687-6223b8c547ac",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ae9e64ed-f220-42c3-b948-d0d0a6f01f96",
          "title": "GraphQL Auth API",
          "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/graphql/external/auth.test.js",
          "file": "/test/graphql/external/auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"GraphQL Auth API\"",
              "fullTitle": "GraphQL Auth API \"before each\" hook in \"GraphQL Auth API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "User.clear();\nTodo.clear();",
              "err": {},
              "uuid": "03098f83-6833-4933-b858-64b4acf0b6b6",
              "parentUUID": "ae9e64ed-f220-42c3-b948-d0d0a6f01f96",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dcb2696f-6728-4e3e-bc85-a3c58f295542",
              "title": "Mutation register",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/graphql/external/auth.test.js",
              "file": "/test/graphql/external/auth.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register a new user successfully",
                  "fullTitle": "GraphQL Auth API Mutation register should register a new user successfully",
                  "timedOut": false,
                  "duration": 132,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nconst res = await api\n    .post('/graphql')\n    .send({\n        query: registerMutation,\n        variables: {\n            input: { email: `test_get_todos_${Date.now()}@teste.com`, password: \"123456\" }\n        }\n    });\nexpect(res.body.data.register.message).to.equal('Usuário cadastrado com sucesso');",
                  "err": {},
                  "uuid": "df2d927f-4736-467d-86a0-0b3f7c2b68f9",
                  "parentUUID": "dcb2696f-6728-4e3e-bc85-a3c58f295542",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error if email already exists",
                  "fullTitle": "GraphQL Auth API Mutation register should return error if email already exists",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nconst email = 'duplicate@teste.com';\nawait api\n    .post('/graphql')\n    .send({\n        query: registerMutation,\n        variables: {\n            input: { email, password: \"123456\" }\n        }\n    });\nconst res = await api\n    .post('/graphql')\n    .send({\n        query: registerMutation,\n        variables: {\n            input: { email, password: \"123456\" }\n        }\n    });\nexpect(res.body.errors[0].message).to.equal('O usuário já existe');",
                  "err": {},
                  "uuid": "380bce94-f9e8-424d-8193-b337ce508f4d",
                  "parentUUID": "dcb2696f-6728-4e3e-bc85-a3c58f295542",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate required fields with GraphQL schema",
                  "fullTitle": "GraphQL Auth API Mutation register should validate required fields with GraphQL schema",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n    .post('/graphql')\n    .send({\n        query: registerMutation,\n        variables: {\n            input: { email: 'teste@teste.com' }\n        }\n    });\nexpect(res.body.errors[0].message).to.include('Field \"password\" of required type \"String!\" was not provided');",
                  "err": {},
                  "uuid": "1e004cf9-e1f8-40bc-a666-a19a3b4a0ac1",
                  "parentUUID": "dcb2696f-6728-4e3e-bc85-a3c58f295542",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "df2d927f-4736-467d-86a0-0b3f7c2b68f9",
                "380bce94-f9e8-424d-8193-b337ce508f4d",
                "1e004cf9-e1f8-40bc-a666-a19a3b4a0ac1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 224,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "ac6d79d4-75af-4012-8a3e-65cb9c038f31",
              "title": "Mutation login",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/graphql/external/auth.test.js",
              "file": "/test/graphql/external/auth.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should login successfully and return a token",
                  "fullTitle": "GraphQL Auth API Mutation login should login successfully and return a token",
                  "timedOut": false,
                  "duration": 174,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nconst email = `test_login_success_${Date.now()}@teste.com`;\nconst password = '123456';\nawait api\n    .post('/graphql')\n    .send({\n        query: `mutation Register($input: RegisterInput!) {\nregister(input: $input) { message }\n          }`,\n        variables: {\n            input: { email, password }\n        }\n    });\nconst res = await api\n    .post('/graphql')\n    .send({\n        query: loginMutation,\n        variables: {\n            input: { email, password }\n        }\n    });\nexpect(res.body.data.login).to.have.property('token');",
                  "err": {},
                  "uuid": "a0fdafe3-d7ad-4159-bd92-538337d5e775",
                  "parentUUID": "ac6d79d4-75af-4012-8a3e-65cb9c038f31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error for invalid credentials (user not found)",
                  "fullTitle": "GraphQL Auth API Mutation login should return error for invalid credentials (user not found)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nconst res = await api\n    .post('/graphql')\n    .send({\n        query: loginMutation,\n        variables: {\n            input: { email: `nonexistent_${Date.now()}@teste.com`, password: '123456' }\n        }\n    });\nexpect(res.body.errors[0].message).to.equal('Credenciais inválidas');",
                  "err": {},
                  "uuid": "e9562208-4163-474a-a34a-936619260fc2",
                  "parentUUID": "ac6d79d4-75af-4012-8a3e-65cb9c038f31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error for invalid credentials (wrong password)",
                  "fullTitle": "GraphQL Auth API Mutation login should return error for invalid credentials (wrong password)",
                  "timedOut": false,
                  "duration": 170,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nconst email = `test_login_wrong_pwd_${Date.now()}@teste.com`;\nconst password = '123456';\nawait api\n    .post('/graphql')\n    .send({\n        query: `mutation Register($input: RegisterInput!) {\nregister(input: $input) { message }\n          }`,\n        variables: {\n            input: { email, password }\n        }\n    });\nconst res = await api\n    .post('/graphql')\n    .send({\n        query: loginMutation,\n        variables: {\n            input: { email, password: 'wrongpassword' }\n        }\n    });\nexpect(res.body.errors[0].message).to.equal('Credenciais inválidas');",
                  "err": {},
                  "uuid": "e29d0726-6d21-400c-88f0-ad396cec685f",
                  "parentUUID": "ac6d79d4-75af-4012-8a3e-65cb9c038f31",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a0fdafe3-d7ad-4159-bd92-538337d5e775",
                "e9562208-4163-474a-a34a-936619260fc2",
                "e29d0726-6d21-400c-88f0-ad396cec685f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 347,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "487c92c1-1e57-493b-a6d3-c87a9f0351d7",
          "title": "GraphQL Todo API",
          "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/graphql/external/todo.test.js",
          "file": "/test/graphql/external/todo.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GraphQL Todo API\"",
              "fullTitle": "GraphQL Todo API \"before all\" hook in \"GraphQL Todo API\"",
              "timedOut": false,
              "duration": 175,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "User.clear();\nTodo.clear();\nconst email = `test_get_todos_${Date.now()}@teste.com`;\nconst password = 'password123';\n// Register\nawait api.post('/graphql').send({\n    query: `mutation Register($input: RegisterInput!) {\nregister(input: $input) { message }\n      }`,\n    variables: { input: { email, password } }\n});\n// Login\nconst loginRes = await api.post('/graphql').send({\n    query: `mutation Login($input: LoginInput!) {\nlogin(input: $input) { token }\n      }`,\n    variables: { input: { email, password } }\n});\ntoken = loginRes.body.data.login.token;",
              "err": {},
              "uuid": "5894cd7c-975e-48f3-91ac-b03e0a718c5e",
              "parentUUID": "487c92c1-1e57-493b-a6d3-c87a9f0351d7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "74c0c948-4d42-4a3a-a311-f42659e9982e",
              "title": "Query todos",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/graphql/external/todo.test.js",
              "file": "/test/graphql/external/todo.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an array of todos for the authenticated user",
                  "fullTitle": "GraphQL Todo API Query todos should return an array of todos for the authenticated user",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create a todo first\nawait api\n    .post('/graphql')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        query: `mutation CreateTodo($input: CreateTodoInput!) {\ncreateTodo(input: $input) {\n  id\n  title\n}\n          }`,\n        variables: {\n            input: { title: 'Test Todo for GET' }\n        }\n    });\nconst res = await api\n    .post('/graphql')\n    .set('Authorization', `Bearer ${token}`)\n    .send({ query: todosQuery });\nexpect(res.body.data.todos).to.be.an('array');\nexpect(res.body.data.todos.length).to.be.at.least(1);\nexpect(res.body.data.todos[0].title).to.equal('Test Todo for GET');",
                  "err": {},
                  "uuid": "3715f609-832e-490a-9925-32bc0dee640b",
                  "parentUUID": "74c0c948-4d42-4a3a-a311-f42659e9982e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3715f609-832e-490a-9925-32bc0dee640b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "07380f8e-91a2-4f1c-a828-5431fc0980bf",
              "title": "Mutation createTodo",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/graphql/external/todo.test.js",
              "file": "/test/graphql/external/todo.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new todo",
                  "fullTitle": "GraphQL Todo API Mutation createTodo should create a new todo",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n    .post('/graphql')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        query: createTodoMutation,\n        variables: {\n            input: { title: 'New API Test Todo' }\n        }\n    });\nexpect(res.body.data.createTodo.title).to.equal('New API Test Todo');\nexpect(res.body.data.createTodo.completed).to.be.false;",
                  "err": {},
                  "uuid": "84e3fcc0-b91a-4410-b177-2f1d9745e64c",
                  "parentUUID": "07380f8e-91a2-4f1c-a828-5431fc0980bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate required fields with GraphQL schema",
                  "fullTitle": "GraphQL Todo API Mutation createTodo should validate required fields with GraphQL schema",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n    .post('/graphql')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        query: createTodoMutation,\n        variables: {\n            input: { description: 'No title provided' }\n        }\n    });\nexpect(res.body.errors[0].message).to.include('Field \"title\" of required type \"String!\" was not provided');",
                  "err": {},
                  "uuid": "6d7b94d3-e125-4849-88c0-212bd4a961ac",
                  "parentUUID": "07380f8e-91a2-4f1c-a828-5431fc0980bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "84e3fcc0-b91a-4410-b177-2f1d9745e64c",
                "6d7b94d3-e125-4849-88c0-212bd4a961ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "21a5fe05-3534-404c-a810-e76a63b636f5",
              "title": "Mutation updateTodo",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/graphql/external/todo.test.js",
              "file": "/test/graphql/external/todo.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Mutation updateTodo\"",
                  "fullTitle": "GraphQL Todo API Mutation updateTodo \"before each\" hook in \"Mutation updateTodo\"",
                  "timedOut": false,
                  "duration": 3,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const createRes = await api\n    .post('/graphql')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        query: `mutation CreateTodo($input: CreateTodoInput!) {\ncreateTodo(input: $input) {\n  id\n}\n          }`,\n        variables: {\n            input: { title: 'Todo to Update', description: 'Description' }\n        }\n    });\ntodoId = createRes.body.data.createTodo.id;",
                  "err": {},
                  "uuid": "fd8670b2-1ab0-4ea3-8dd7-e516c4102b09",
                  "parentUUID": "21a5fe05-3534-404c-a810-e76a63b636f5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a todo successfully",
                  "fullTitle": "GraphQL Todo API Mutation updateTodo should update a todo successfully",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n    .post('/graphql')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        query: `mutation UpdateTodo($id: ID!, $input: UpdateTodoInput!) {\nupdateTodo(id: $id, input: $input) {\n  id\n  title\n  description\n  completed\n}\n          }`,\n        variables: {\n            id: todoId,\n            input: {\n                title: 'Updated Title',\n                description: 'Updated Description',\n                completed: true\n            }\n        }\n    });\nexpect(res.body.data.updateTodo.title).to.equal('Updated Title');\nexpect(res.body.data.updateTodo.completed).to.be.true;",
                  "err": {},
                  "uuid": "1bf5b1db-b92c-4800-a254-507177c8d1ba",
                  "parentUUID": "21a5fe05-3534-404c-a810-e76a63b636f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error if todo not found",
                  "fullTitle": "GraphQL Todo API Mutation updateTodo should return error if todo not found",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n    .post('/graphql')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        query: `mutation UpdateTodo($id: ID!, $input: UpdateTodoInput!) {\nupdateTodo(id: $id, input: $input) {\n  id\n  title\n}\n          }`,\n        variables: {\n            id: \"9999\",\n            input: { title: 'Does not matter' }\n        }\n    });\nexpect(res.body.errors[0].message).to.equal('Tarefa não encontrada');",
                  "err": {},
                  "uuid": "36ede008-38b1-4b20-939f-d5665bcf09cf",
                  "parentUUID": "21a5fe05-3534-404c-a810-e76a63b636f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1bf5b1db-b92c-4800-a254-507177c8d1ba",
                "36ede008-38b1-4b20-939f-d5665bcf09cf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "7a0c827a-0052-449f-9a16-0bfad330d1a7",
              "title": "Mutation deleteTodo",
              "fullFile": "/home/runner/work/trabalho-final-todo-list/trabalho-final-todo-list/test/graphql/external/todo.test.js",
              "file": "/test/graphql/external/todo.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a todo successfully",
                  "fullTitle": "GraphQL Todo API Mutation deleteTodo should delete a todo successfully",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create a todo first\nconst createRes = await api\n    .post('/graphql')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        query: `mutation CreateTodo($input: CreateTodoInput!) {\ncreateTodo(input: $input) {\n  id\n}\n          }`,\n        variables: {\n            input: { title: 'Todo to be deleted' }\n        }\n    });\nconst todoId = createRes.body.data.createTodo.id;\nconst res = await api\n    .post('/graphql')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        query: `mutation DeleteTodo($id: ID!) {\ndeleteTodo(id: $id) {\n  message\n}\n          }`,\n        variables: { id: todoId }\n    });\nexpect(res.body.data.deleteTodo.message).to.equal('Tarefa excluída com sucesso');",
                  "err": {},
                  "uuid": "24da4775-0094-4cae-950f-190d5331d941",
                  "parentUUID": "7a0c827a-0052-449f-9a16-0bfad330d1a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error if todo not found",
                  "fullTitle": "GraphQL Todo API Mutation deleteTodo should return error if todo not found",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n    .post('/graphql')\n    .set('Authorization', `Bearer ${token}`)\n    .send({\n        query: `mutation DeleteTodo($id: ID!) {\ndeleteTodo(id: $id) {\n  message\n}\n          }`,\n        variables: { id: \"9999\" }\n    });\nexpect(res.body.errors[0].message).to.equal('Tarefa não encontrada');",
                  "err": {},
                  "uuid": "d0ba6d37-c5f4-4ad3-96a7-e23ecfeed067",
                  "parentUUID": "7a0c827a-0052-449f-9a16-0bfad330d1a7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "24da4775-0094-4cae-950f-190d5331d941",
                "d0ba6d37-c5f4-4ad3-96a7-e23ecfeed067"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report-graphql-external",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./",
        "reportFilename": "report-graphql-external",
        "overwrite": "true",
        "html": "true",
        "json": "true"
      },
      "version": "6.2.0"
    }
  }
}
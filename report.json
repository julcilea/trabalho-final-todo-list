{
  "stats": {
    "suites": 8,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-07T04:38:54.552Z",
    "end": "2025-09-07T04:38:55.103Z",
    "duration": 551,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7617e454-4894-4723-abfe-cbcdb7a5fabc",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "168edaa5-d7c6-470f-9023-d05cb9f80eae",
          "title": "Auth API",
          "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/auth.test.js",
          "file": "/test/rest/external/auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Auth API\"",
              "fullTitle": "Auth API \"before each\" hook in \"Auth API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "User.clear();\nTodo.clear();",
              "err": {},
              "uuid": "0aa8582f-d312-4cfb-99f1-4c1b74df5f12",
              "parentUUID": "168edaa5-d7c6-470f-9023-d05cb9f80eae",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cacc9650-a48f-4e24-a069-51cc828fd9d2",
              "title": "POST /auth/register",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/auth.test.js",
              "file": "/test/rest/external/auth.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register a new user successfully",
                  "fullTitle": "Auth API POST /auth/register should register a new user successfully",
                  "timedOut": false,
                  "duration": 89,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nconst res = await api\n  .post('/auth/register')\n  .send({ email: `test_get_todos_${Date.now()}@teste.com`, password: \"123456\" });\nexpect(res.status).to.equal(201);\nexpect(res.body).to.contain.property('token');",
                  "err": {},
                  "uuid": "ba4e2e7b-0112-433d-9a6f-eddffc7128c8",
                  "parentUUID": "cacc9650-a48f-4e24-a069-51cc828fd9d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 409 if email already exists",
                  "fullTitle": "Auth API POST /auth/register should return 409 if email already exists",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nawait api\n  .post('/auth/register')\n  .send({ email: 'duplicate@teste.com', password: '123456' });\nconst res = await api\n  .post('/auth/register')\n  .send({ email: 'duplicate@teste.com', password: '123456' });\nexpect(res.status).to.equal(409);\nexpect(res.body.error).to.equal('email already registered');",
                  "err": {},
                  "uuid": "b24fb44c-0db5-42bb-9ce5-2f04bb06d541",
                  "parentUUID": "cacc9650-a48f-4e24-a069-51cc828fd9d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if email or password are not provided",
                  "fullTitle": "Auth API POST /auth/register should return 400 if email or password are not provided",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .post('/auth/register')\n  .send({ email: 'teste@teste.com' });\nexpect(res.status).to.equal(400);\nexpect(res.body.error).to.equal('email and password are required');",
                  "err": {},
                  "uuid": "a983b592-7510-4edd-b927-2d81061073f9",
                  "parentUUID": "cacc9650-a48f-4e24-a069-51cc828fd9d2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ba4e2e7b-0112-433d-9a6f-eddffc7128c8",
                "b24fb44c-0db5-42bb-9ce5-2f04bb06d541",
                "a983b592-7510-4edd-b927-2d81061073f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 95,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "d1958d78-5bcf-45c1-a567-0b299796dda5",
              "title": "POST /auth/login",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/auth.test.js",
              "file": "/test/rest/external/auth.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should login successfully and return a token",
                  "fullTitle": "Auth API POST /auth/login should login successfully and return a token",
                  "timedOut": false,
                  "duration": 140,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nconst email = `test_login_success_${Date.now()}@teste.com`;\nconst password = '123456';\nawait api\n  .post('/auth/register')\n  .send({ email, password });\nconst res = await api\n  .post('/auth/login')\n  .send({ email, password });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('token');",
                  "err": {},
                  "uuid": "a71f9aaa-9027-46f7-87ee-9282c252c587",
                  "parentUUID": "d1958d78-5bcf-45c1-a567-0b299796dda5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for invalid credentials (user not found)",
                  "fullTitle": "Auth API POST /auth/login should return 401 for invalid credentials (user not found)",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nconst res = await api\n  .post('/auth/login')\n  .send({ email: `nonexistent_${Date.now()}@teste.com`, password: '123456' });\nexpect(res.status).to.equal(401);\nexpect(res.body.error).to.equal('invalid credentials');",
                  "err": {},
                  "uuid": "9e96a212-5ffe-4c28-a3ed-94355d12df81",
                  "parentUUID": "d1958d78-5bcf-45c1-a567-0b299796dda5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for invalid credentials (wrong password)",
                  "fullTitle": "Auth API POST /auth/login should return 401 for invalid credentials (wrong password)",
                  "timedOut": false,
                  "duration": 141,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nconst email = `test_login_wrong_pwd_${Date.now()}@teste.com`;\nconst password = '123456';\nawait api\n  .post('/auth/register')\n  .send({ email, password });\nconst res = await api\n  .post('/auth/login')\n  .send({ email, password: 'wrongpassword' });\nexpect(res.status).to.equal(401);\nexpect(res.body.error).to.equal('invalid credentials');",
                  "err": {},
                  "uuid": "6e5b1f45-c454-4641-bfa0-8cf74572dfed",
                  "parentUUID": "d1958d78-5bcf-45c1-a567-0b299796dda5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a71f9aaa-9027-46f7-87ee-9282c252c587",
                "9e96a212-5ffe-4c28-a3ed-94355d12df81",
                "6e5b1f45-c454-4641-bfa0-8cf74572dfed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 283,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "96073c9a-e7bc-418f-ad36-cce5f95f296a",
          "title": "To-Do API",
          "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/todo.test.js",
          "file": "/test/rest/external/todo.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"To-Do API\"",
              "fullTitle": "To-Do API \"before all\" hook in \"To-Do API\"",
              "timedOut": false,
              "duration": 140,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "User.clear();\nTodo.clear();\nconst email = `test_get_todos_${Date.now()}@teste.com`;\nconst password = 'password123';\nawait api.post('/auth/register').send({ email, password });\nconst loginRes = await api.post('/auth/login').send({ email, password });\ntoken = loginRes.body.token;",
              "err": {},
              "uuid": "50292912-abd3-4ec6-8b0b-77667a9f8aa9",
              "parentUUID": "96073c9a-e7bc-418f-ad36-cce5f95f296a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7922a1d8-0087-43e7-a33f-3eecaf20eae2",
              "title": "GET /todos",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/todo.test.js",
              "file": "/test/rest/external/todo.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an array of todos for the authenticated user",
                  "fullTitle": "To-Do API GET /todos should return an array of todos for the authenticated user",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ title: 'Test Todo for GET' });\nconst res = await api\n  .get('/todos')\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body.length).to.be.at.least(1);\nexpect(res.body[0].title).to.equal('Test Todo for GET');",
                  "err": {},
                  "uuid": "b8c7dbcd-1beb-4fd1-b6f2-331435ca421b",
                  "parentUUID": "7922a1d8-0087-43e7-a33f-3eecaf20eae2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8c7dbcd-1beb-4fd1-b6f2-331435ca421b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "73333987-3a81-43a7-9647-9f946e3df83e",
              "title": "POST /todos",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/todo.test.js",
              "file": "/test/rest/external/todo.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new todo",
                  "fullTitle": "To-Do API POST /todos should create a new todo",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newTodo = { title: 'New API Test Todo' };\nconst res = await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send(newTodo);\nexpect(res.status).to.equal(201);\nexpect(res.body.title).to.equal(newTodo.title);",
                  "err": {},
                  "uuid": "fc699144-69af-4770-962c-43b76baba610",
                  "parentUUID": "73333987-3a81-43a7-9647-9f946e3df83e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if title is missing",
                  "fullTitle": "To-Do API POST /todos should return 400 if title is missing",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send(\"\");\nexpect(res.status).to.equal(400);\nexpect(res.body.error).to.equal('title is required');",
                  "err": {},
                  "uuid": "d2316522-8ec3-439e-8b06-9ca1fb2bb069",
                  "parentUUID": "73333987-3a81-43a7-9647-9f946e3df83e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fc699144-69af-4770-962c-43b76baba610",
                "d2316522-8ec3-439e-8b06-9ca1fb2bb069"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "d3920d9e-f12d-4a1e-aa59-557e2fefb4db",
              "title": "PUT /todos/:id",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/todo.test.js",
              "file": "/test/rest/external/todo.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"PUT /todos/:id\"",
                  "fullTitle": "To-Do API PUT /todos/:id \"before each\" hook in \"PUT /todos/:id\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newTodo = { title: 'New API Test Todo' };\nconst createRes = await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send(newTodo);\ntodoId = createRes.body.id;",
                  "err": {},
                  "uuid": "8096c6d6-6da2-470b-9e17-3696cb8ece73",
                  "parentUUID": "d3920d9e-f12d-4a1e-aa59-557e2fefb4db",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a todo successfully",
                  "fullTitle": "To-Do API PUT /todos/:id should update a todo successfully",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedData = { title: 'Updated Title', completed: true };\nconst res = await api\n  .patch(`/todos/${todoId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(updatedData);\nexpect(res.status).to.equal(200);\nexpect(res.body.title).to.equal(updatedData.title);\nexpect(res.body.completed).to.be.true;",
                  "err": {},
                  "uuid": "584ecf54-af53-455b-a31d-4cc60534f2ba",
                  "parentUUID": "d3920d9e-f12d-4a1e-aa59-557e2fefb4db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if todo not found",
                  "fullTitle": "To-Do API PUT /todos/:id should return 404 if todo not found",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Use a non-existent ID\nconst nonExistentId = 9999;\nconst res = await api\n  .patch(`/todos/${nonExistentId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({ title: 'Does not matter' });\nexpect(res.status).to.equal(404);\nexpect(res.body.error).to.equal('not found');",
                  "err": {},
                  "uuid": "c40967a2-47d2-4aa5-b351-ff34cf328843",
                  "parentUUID": "d3920d9e-f12d-4a1e-aa59-557e2fefb4db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "584ecf54-af53-455b-a31d-4cc60534f2ba",
                "c40967a2-47d2-4aa5-b351-ff34cf328843"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "7014abf1-ea8b-4a80-b4e3-17f007496bdd",
              "title": "DELETE /todos/:id",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/todo.test.js",
              "file": "/test/rest/external/todo.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a todo successfully",
                  "fullTitle": "To-Do API DELETE /todos/:id should delete a todo successfully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const createRes = await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ title: 'Todo to be deleted' });\nconst todoId = createRes.body.id;\nconst res = await api\n  .delete(`/todos/${todoId}`)\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(204);",
                  "err": {},
                  "uuid": "06b51d80-d807-4416-ac0c-a864c8e36e56",
                  "parentUUID": "7014abf1-ea8b-4a80-b4e3-17f007496bdd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if todo not found",
                  "fullTitle": "To-Do API DELETE /todos/:id should return 404 if todo not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .delete(`/todos/9999`)\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(404);\nexpect(res.body.error).to.equal('not found');",
                  "err": {},
                  "uuid": "93f330a6-877c-4313-9605-b3a71dd0e0a6",
                  "parentUUID": "7014abf1-ea8b-4a80-b4e3-17f007496bdd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "06b51d80-d807-4416-ac0c-a864c8e36e56",
                "93f330a6-877c-4313-9605-b3a71dd0e0a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./",
        "reportFilename": "report",
        "overwrite": "true",
        "html": "true",
        "json": "true"
      },
      "version": "6.2.0"
    }
  }
}
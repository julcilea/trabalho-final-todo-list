{
  "stats": {
    "suites": 8,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-07T04:16:06.821Z",
    "end": "2025-09-07T04:16:07.388Z",
    "duration": 567,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "09986c68-9e34-4043-b385-a7a8adf36d6b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d77713c9-a8e0-4921-a0aa-0f8ee2cc4a14",
          "title": "Auth API",
          "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/auth.test.js",
          "file": "/test/rest/external/auth.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Auth API\"",
              "fullTitle": "Auth API \"before each\" hook in \"Auth API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "User.clear();\nTodo.clear();",
              "err": {},
              "uuid": "443b5ebd-edf9-4589-ab57-baeaf0b1d807",
              "parentUUID": "d77713c9-a8e0-4921-a0aa-0f8ee2cc4a14",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ebe3eb44-339e-4574-b590-378b5d6877b6",
              "title": "POST /auth/register",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/auth.test.js",
              "file": "/test/rest/external/auth.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register a new user successfully",
                  "fullTitle": "Auth API POST /auth/register should register a new user successfully",
                  "timedOut": false,
                  "duration": 93,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nconst res = await api\n  .post('/auth/register')\n  .send({ email: `test_get_todos_${Date.now()}@teste.com`, password: \"123456\" });\nexpect(res.status).to.equal(201);\nexpect(res.body).to.contain.property('token');",
                  "err": {},
                  "uuid": "4253a9b4-207a-4411-9a2a-4234000b69a4",
                  "parentUUID": "ebe3eb44-339e-4574-b590-378b5d6877b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 409 if email already exists",
                  "fullTitle": "Auth API POST /auth/register should return 409 if email already exists",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nawait api\n  .post('/auth/register')\n  .send({ email: 'duplicate@teste.com', password: '123456' });\nconst res = await api\n  .post('/auth/register')\n  .send({ email: 'duplicate@teste.com', password: '123456' });\nexpect(res.status).to.equal(409);\nexpect(res.body.error).to.equal('email already registered');",
                  "err": {},
                  "uuid": "c96acaef-80b4-43fc-b680-693cd13bb3c8",
                  "parentUUID": "ebe3eb44-339e-4574-b590-378b5d6877b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if email or password are not provided",
                  "fullTitle": "Auth API POST /auth/register should return 400 if email or password are not provided",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .post('/auth/register')\n  .send({ email: 'teste@teste.com' });\nexpect(res.status).to.equal(400);\nexpect(res.body.error).to.equal('email and password are required');",
                  "err": {},
                  "uuid": "152d8506-dcfc-4a43-91db-c94826745343",
                  "parentUUID": "ebe3eb44-339e-4574-b590-378b5d6877b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4253a9b4-207a-4411-9a2a-4234000b69a4",
                "c96acaef-80b4-43fc-b680-693cd13bb3c8",
                "152d8506-dcfc-4a43-91db-c94826745343"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 97,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "00f3ca24-d042-4c0c-82c3-ffe689ccd6f6",
              "title": "POST /auth/login",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/auth.test.js",
              "file": "/test/rest/external/auth.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should login successfully and return a token",
                  "fullTitle": "Auth API POST /auth/login should login successfully and return a token",
                  "timedOut": false,
                  "duration": 141,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nconst email = `test_login_success_${Date.now()}@teste.com`;\nconst password = '123456';\nawait api\n  .post('/auth/register')\n  .send({ email, password });\nconst res = await api\n  .post('/auth/login')\n  .send({ email, password });\nexpect(res.status).to.equal(200);\nexpect(res.body).to.have.property('token');",
                  "err": {},
                  "uuid": "e429f8b4-648b-40b8-8237-93e2db96344d",
                  "parentUUID": "00f3ca24-d042-4c0c-82c3-ffe689ccd6f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for invalid credentials (user not found)",
                  "fullTitle": "Auth API POST /auth/login should return 401 for invalid credentials (user not found)",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nconst res = await api\n  .post('/auth/login')\n  .send({ email: `nonexistent_${Date.now()}@teste.com`, password: '123456' });\nexpect(res.status).to.equal(401);\nexpect(res.body.error).to.equal('invalid credentials');",
                  "err": {},
                  "uuid": "bb4d0ebe-ab91-4fd3-9ffd-6bf92598dad9",
                  "parentUUID": "00f3ca24-d042-4c0c-82c3-ffe689ccd6f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 401 for invalid credentials (wrong password)",
                  "fullTitle": "Auth API POST /auth/login should return 401 for invalid credentials (wrong password)",
                  "timedOut": false,
                  "duration": 141,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "User.clear();\nconst email = `test_login_wrong_pwd_${Date.now()}@teste.com`;\nconst password = '123456';\nawait api\n  .post('/auth/register')\n  .send({ email, password });\nconst res = await api\n  .post('/auth/login')\n  .send({ email, password: 'wrongpassword' });\nexpect(res.status).to.equal(401);\nexpect(res.body.error).to.equal('invalid credentials');",
                  "err": {},
                  "uuid": "66162b9b-3899-4719-ae45-ebe42e723490",
                  "parentUUID": "00f3ca24-d042-4c0c-82c3-ffe689ccd6f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e429f8b4-648b-40b8-8237-93e2db96344d",
                "bb4d0ebe-ab91-4fd3-9ffd-6bf92598dad9",
                "66162b9b-3899-4719-ae45-ebe42e723490"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 284,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "7817be80-a672-4fbe-a0f5-9b936c2c6521",
          "title": "To-Do API",
          "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/todo.test.js",
          "file": "/test/rest/external/todo.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"To-Do API\"",
              "fullTitle": "To-Do API \"before all\" hook in \"To-Do API\"",
              "timedOut": false,
              "duration": 140,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "User.clear();\nTodo.clear();\nconst email = `test_get_todos_${Date.now()}@teste.com`;\nconst password = 'password123';\nawait api.post('/auth/register').send({ email, password });\nconst loginRes = await api.post('/auth/login').send({ email, password });\ntoken = loginRes.body.token;",
              "err": {},
              "uuid": "2351039f-9e97-4f95-823f-5164314207fe",
              "parentUUID": "7817be80-a672-4fbe-a0f5-9b936c2c6521",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dec7a8a2-363f-4ce0-90ed-44a5034d98d7",
              "title": "GET /todos",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/todo.test.js",
              "file": "/test/rest/external/todo.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return an array of todos for the authenticated user",
                  "fullTitle": "To-Do API GET /todos should return an array of todos for the authenticated user",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ title: 'Test Todo for GET' });\nconst res = await api\n  .get('/todos')\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(200);\nexpect(res.body).to.be.an('array');\nexpect(res.body.length).to.be.at.least(1);\nexpect(res.body[0].title).to.equal('Test Todo for GET');",
                  "err": {},
                  "uuid": "fbd9d95f-9909-4b8a-97d0-1d924067ac6c",
                  "parentUUID": "dec7a8a2-363f-4ce0-90ed-44a5034d98d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbd9d95f-9909-4b8a-97d0-1d924067ac6c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "acf0f595-5083-44bb-b216-91ea5022dcd6",
              "title": "POST /todos",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/todo.test.js",
              "file": "/test/rest/external/todo.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new todo",
                  "fullTitle": "To-Do API POST /todos should create a new todo",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newTodo = { title: 'New API Test Todo' };\nconst res = await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send(newTodo);\nexpect(res.status).to.equal(201);\nexpect(res.body.title).to.equal(newTodo.title);",
                  "err": {},
                  "uuid": "8d4b1146-6548-4eb7-83ec-f5f94c669001",
                  "parentUUID": "acf0f595-5083-44bb-b216-91ea5022dcd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 400 if title is missing",
                  "fullTitle": "To-Do API POST /todos should return 400 if title is missing",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send(\"\");\nexpect(res.status).to.equal(400);\nexpect(res.body.error).to.equal('title is required');",
                  "err": {},
                  "uuid": "58b095d8-e6a7-4d16-9f04-f3a37f23c38f",
                  "parentUUID": "acf0f595-5083-44bb-b216-91ea5022dcd6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8d4b1146-6548-4eb7-83ec-f5f94c669001",
                "58b095d8-e6a7-4d16-9f04-f3a37f23c38f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "fcc1f35d-ab18-4072-8bfd-ec2d03016f95",
              "title": "PUT /todos/:id",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/todo.test.js",
              "file": "/test/rest/external/todo.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"PUT /todos/:id\"",
                  "fullTitle": "To-Do API PUT /todos/:id \"before each\" hook in \"PUT /todos/:id\"",
                  "timedOut": false,
                  "duration": 4,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newTodo = { title: 'New API Test Todo' };\nconst createRes = await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send(newTodo);\ntodoId = createRes.body.id;",
                  "err": {},
                  "uuid": "18bee4bb-afdb-48d2-b9d6-4c1ebaf390cd",
                  "parentUUID": "fcc1f35d-ab18-4072-8bfd-ec2d03016f95",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update a todo successfully",
                  "fullTitle": "To-Do API PUT /todos/:id should update a todo successfully",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedData = { title: 'Updated Title', completed: true };\nconst res = await api\n  .patch(`/todos/${todoId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send(updatedData);\nexpect(res.status).to.equal(200);\nexpect(res.body.title).to.equal(updatedData.title);\nexpect(res.body.completed).to.be.true;",
                  "err": {},
                  "uuid": "b1a54df5-9cf7-454c-a643-dc9d6a1e1ed1",
                  "parentUUID": "fcc1f35d-ab18-4072-8bfd-ec2d03016f95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if todo not found",
                  "fullTitle": "To-Do API PUT /todos/:id should return 404 if todo not found",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Use a non-existent ID\nconst nonExistentId = 9999;\nconst res = await api\n  .patch(`/todos/${nonExistentId}`)\n  .set('Authorization', `Bearer ${token}`)\n  .send({ title: 'Does not matter' });\nexpect(res.status).to.equal(404);\nexpect(res.body.error).to.equal('not found');",
                  "err": {},
                  "uuid": "d3f1fc1f-897b-49e9-a420-2b8ea279a56d",
                  "parentUUID": "fcc1f35d-ab18-4072-8bfd-ec2d03016f95",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b1a54df5-9cf7-454c-a643-dc9d6a1e1ed1",
                "d3f1fc1f-897b-49e9-a420-2b8ea279a56d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            },
            {
              "uuid": "034bdb5c-1add-45f8-a91e-77a5d19c0b50",
              "title": "DELETE /todos/:id",
              "fullFile": "/home/julcilea/Documentos/PGATS/trabalho-final-todo-list/test/rest/external/todo.test.js",
              "file": "/test/rest/external/todo.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete a todo successfully",
                  "fullTitle": "To-Do API DELETE /todos/:id should delete a todo successfully",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const createRes = await api\n  .post('/todos')\n  .set('Authorization', `Bearer ${token}`)\n  .send({ title: 'Todo to be deleted' });\nconst todoId = createRes.body.id;\nconst res = await api\n  .delete(`/todos/${todoId}`)\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(204);",
                  "err": {},
                  "uuid": "c9acd600-4331-464c-a194-cef40bbc6eb2",
                  "parentUUID": "034bdb5c-1add-45f8-a91e-77a5d19c0b50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 if todo not found",
                  "fullTitle": "To-Do API DELETE /todos/:id should return 404 if todo not found",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await api\n  .delete(`/todos/9999`)\n  .set('Authorization', `Bearer ${token}`);\nexpect(res.status).to.equal(404);\nexpect(res.body.error).to.equal('not found');",
                  "err": {},
                  "uuid": "c72de8e7-17e9-4cb1-9c23-48049fdbae0e",
                  "parentUUID": "034bdb5c-1add-45f8-a91e-77a5d19c0b50",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9acd600-4331-464c-a194-cef40bbc6eb2",
                "c72de8e7-17e9-4cb1-9c23-48049fdbae0e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./",
        "reportFilename": "report",
        "overwrite": "true",
        "html": "true",
        "json": "true"
      },
      "version": "6.2.0"
    }
  }
}